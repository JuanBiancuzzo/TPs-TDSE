
tdse-tp0_05-hw_sw_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003414  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08003520  08003520  00004520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  000050b4  2**0
                  CONTENTS
  4 .ARM          00000008  080037f8  080037f8  000047f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003800  08003800  000050b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003800  08003800  00004800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003804  08003804  00004804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  08003808  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200000b4  080038bc  000050b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  080038bc  00005374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077ba  00000000  00000000  000050dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d4  00000000  00000000  0000c897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000e270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000526  00000000  00000000  0000e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f2c  00000000  00000000  0000ee76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a700  00000000  00000000  00026da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c37  00000000  00000000  000314a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b40d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025ec  00000000  00000000  000b411c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000b6708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003508 	.word	0x08003508

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08003508 	.word	0x08003508

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000162:	f002 f81b 	bl	800219c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fa23 	bl	80005b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_GPIOC_CLK_ENABLE();  // Habilita el reloj para el puerto C
 800016a:	4b1b      	ldr	r3, [pc, #108]	@ (80001d8 <main+0x7c>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a1a      	ldr	r2, [pc, #104]	@ (80001d8 <main+0x7c>)
 8000170:	f043 0310 	orr.w	r3, r3, #16
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b18      	ldr	r3, [pc, #96]	@ (80001d8 <main+0x7c>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0310 	and.w	r3, r3, #16
 800017e:	607b      	str	r3, [r7, #4]
 8000180:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000182:	f107 0308 	add.w	r3, r7, #8
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	605a      	str	r2, [r3, #4]
 800018c:	609a      	str	r2, [r3, #8]
 800018e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000190:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000194:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000196:	2301      	movs	r3, #1
 8000198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800019a:	2300      	movs	r3, #0
 800019c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800019e:	2302      	movs	r3, #2
 80001a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001a2:	f107 0308 	add.w	r3, r7, #8
 80001a6:	4619      	mov	r1, r3
 80001a8:	480c      	ldr	r0, [pc, #48]	@ (80001dc <main+0x80>)
 80001aa:	f000 fb9b 	bl	80008e4 <HAL_GPIO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ae:	f000 f817 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b2:	f000 f881 	bl	80002b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001b6:	f000 f855 	bl	8000264 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Application Init */
  app_init();
 80001ba:	f001 fa59 	bl	8001670 <app_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app_update();
 80001be:	f001 fafd 	bl	80017bc <app_update>

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c6:	4805      	ldr	r0, [pc, #20]	@ (80001dc <main+0x80>)
 80001c8:	f000 fd28 	bl	8000c1c <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);  // Retardo de 3000 ms
 80001cc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80001d0:	f000 fa50 	bl	8000674 <HAL_Delay>
	  app_update();
 80001d4:	bf00      	nop
 80001d6:	e7f2      	b.n	80001be <main+0x62>
 80001d8:	40021000 	.word	0x40021000
 80001dc:	40011000 	.word	0x40011000

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b090      	sub	sp, #64	@ 0x40
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	2228      	movs	r2, #40	@ 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fa59 	bl	80026a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000202:	2302      	movs	r3, #2
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020a:	2310      	movs	r3, #16
 800020c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020e:	2302      	movs	r3, #2
 8000210:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000212:	2300      	movs	r3, #0
 8000214:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000216:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800021a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021c:	f107 0318 	add.w	r3, r7, #24
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fd37 	bl	8000c94 <HAL_RCC_OscConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800022c:	f000 f8b2 	bl	8000394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000230:	230f      	movs	r3, #15
 8000232:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000234:	2302      	movs	r3, #2
 8000236:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2102      	movs	r1, #2
 800024a:	4618      	mov	r0, r3
 800024c:	f000 ffa4 	bl	8001198 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000256:	f000 f89d 	bl	8000394 <Error_Handler>
  }
}
 800025a:	bf00      	nop
 800025c:	3740      	adds	r7, #64	@ 0x40
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000268:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800026a:	4a12      	ldr	r2, [pc, #72]	@ (80002b4 <MX_USART2_UART_Init+0x50>)
 800026c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800026e:	4b10      	ldr	r3, [pc, #64]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000276:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800027c:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000282:	4b0b      	ldr	r3, [pc, #44]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000288:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800028a:	220c      	movs	r2, #12
 800028c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028e:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000294:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800029a:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <MX_USART2_UART_Init+0x4c>)
 800029c:	f001 f90a 	bl	80014b4 <HAL_UART_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002a6:	f000 f875 	bl	8000394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200000d0 	.word	0x200000d0
 80002b4:	40004400 	.word	0x40004400

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000384 <MX_GPIO_Init+0xcc>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a2c      	ldr	r2, [pc, #176]	@ (8000384 <MX_GPIO_Init+0xcc>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000384 <MX_GPIO_Init+0xcc>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e4:	4b27      	ldr	r3, [pc, #156]	@ (8000384 <MX_GPIO_Init+0xcc>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a26      	ldr	r2, [pc, #152]	@ (8000384 <MX_GPIO_Init+0xcc>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b24      	ldr	r3, [pc, #144]	@ (8000384 <MX_GPIO_Init+0xcc>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b21      	ldr	r3, [pc, #132]	@ (8000384 <MX_GPIO_Init+0xcc>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a20      	ldr	r2, [pc, #128]	@ (8000384 <MX_GPIO_Init+0xcc>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b1e      	ldr	r3, [pc, #120]	@ (8000384 <MX_GPIO_Init+0xcc>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000314:	4b1b      	ldr	r3, [pc, #108]	@ (8000384 <MX_GPIO_Init+0xcc>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a1a      	ldr	r2, [pc, #104]	@ (8000384 <MX_GPIO_Init+0xcc>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b18      	ldr	r3, [pc, #96]	@ (8000384 <MX_GPIO_Init+0xcc>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0308 	and.w	r3, r3, #8
 8000328:	603b      	str	r3, [r7, #0]
 800032a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2120      	movs	r1, #32
 8000330:	4815      	ldr	r0, [pc, #84]	@ (8000388 <MX_GPIO_Init+0xd0>)
 8000332:	f000 fc5b 	bl	8000bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000336:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800033a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800033c:	4b13      	ldr	r3, [pc, #76]	@ (800038c <MX_GPIO_Init+0xd4>)
 800033e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000344:	f107 0310 	add.w	r3, r7, #16
 8000348:	4619      	mov	r1, r3
 800034a:	4811      	ldr	r0, [pc, #68]	@ (8000390 <MX_GPIO_Init+0xd8>)
 800034c:	f000 faca 	bl	80008e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000350:	2320      	movs	r3, #32
 8000352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	2301      	movs	r3, #1
 8000356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035c:	2302      	movs	r3, #2
 800035e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	4619      	mov	r1, r3
 8000366:	4808      	ldr	r0, [pc, #32]	@ (8000388 <MX_GPIO_Init+0xd0>)
 8000368:	f000 fabc 	bl	80008e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	2028      	movs	r0, #40	@ 0x28
 8000372:	f000 fa7a 	bl	800086a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000376:	2028      	movs	r0, #40	@ 0x28
 8000378:	f000 fa93 	bl	80008a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037c:	bf00      	nop
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	40010800 	.word	0x40010800
 800038c:	10110000 	.word	0x10110000
 8000390:	40011000 	.word	0x40011000

08000394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000398:	b672      	cpsid	i
}
 800039a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <Error_Handler+0x8>

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a6:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <HAL_MspInit+0x5c>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a14      	ldr	r2, [pc, #80]	@ (80003fc <HAL_MspInit+0x5c>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <HAL_MspInit+0x5c>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <HAL_MspInit+0x5c>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	4a0e      	ldr	r2, [pc, #56]	@ (80003fc <HAL_MspInit+0x5c>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c8:	61d3      	str	r3, [r2, #28]
 80003ca:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <HAL_MspInit+0x5c>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <HAL_MspInit+0x60>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	4a04      	ldr	r2, [pc, #16]	@ (8000400 <HAL_MspInit+0x60>)
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010000 	.word	0x40010000

08000404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a15      	ldr	r2, [pc, #84]	@ (8000474 <HAL_UART_MspInit+0x70>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d123      	bne.n	800046c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000424:	4b14      	ldr	r3, [pc, #80]	@ (8000478 <HAL_UART_MspInit+0x74>)
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	4a13      	ldr	r2, [pc, #76]	@ (8000478 <HAL_UART_MspInit+0x74>)
 800042a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800042e:	61d3      	str	r3, [r2, #28]
 8000430:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <HAL_UART_MspInit+0x74>)
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b0e      	ldr	r3, [pc, #56]	@ (8000478 <HAL_UART_MspInit+0x74>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a0d      	ldr	r2, [pc, #52]	@ (8000478 <HAL_UART_MspInit+0x74>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b0b      	ldr	r3, [pc, #44]	@ (8000478 <HAL_UART_MspInit+0x74>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000454:	230c      	movs	r3, #12
 8000456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000458:	2302      	movs	r3, #2
 800045a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	4619      	mov	r1, r3
 8000466:	4805      	ldr	r0, [pc, #20]	@ (800047c <HAL_UART_MspInit+0x78>)
 8000468:	f000 fa3c 	bl	80008e4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40004400 	.word	0x40004400
 8000478:	40021000 	.word	0x40021000
 800047c:	40010800 	.word	0x40010800

08000480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <NMI_Handler+0x4>

08000488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <HardFault_Handler+0x4>

08000490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <MemManage_Handler+0x4>

08000498 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <BusFault_Handler+0x4>

080004a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <UsageFault_Handler+0x4>

080004a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d0:	f000 f8b4 	bl	800063c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80004d4:	f000 f9ff 	bl	80008d6 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004e4:	f000 fbb4 	bl	8000c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004f4:	4a14      	ldr	r2, [pc, #80]	@ (8000548 <_sbrk+0x5c>)
 80004f6:	4b15      	ldr	r3, [pc, #84]	@ (800054c <_sbrk+0x60>)
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000500:	4b13      	ldr	r3, [pc, #76]	@ (8000550 <_sbrk+0x64>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d102      	bne.n	800050e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000508:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <_sbrk+0x64>)
 800050a:	4a12      	ldr	r2, [pc, #72]	@ (8000554 <_sbrk+0x68>)
 800050c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800050e:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	693a      	ldr	r2, [r7, #16]
 8000518:	429a      	cmp	r2, r3
 800051a:	d207      	bcs.n	800052c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800051c:	f002 f912 	bl	8002744 <__errno>
 8000520:	4603      	mov	r3, r0
 8000522:	220c      	movs	r2, #12
 8000524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	e009      	b.n	8000540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800052c:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <_sbrk+0x64>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000532:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <_sbrk+0x64>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	4a05      	ldr	r2, [pc, #20]	@ (8000550 <_sbrk+0x64>)
 800053c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800053e:	68fb      	ldr	r3, [r7, #12]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20005000 	.word	0x20005000
 800054c:	00000400 	.word	0x00000400
 8000550:	20000118 	.word	0x20000118
 8000554:	20000378 	.word	0x20000378

08000558 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000564:	f7ff fff8 	bl	8000558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000568:	480b      	ldr	r0, [pc, #44]	@ (8000598 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800056a:	490c      	ldr	r1, [pc, #48]	@ (800059c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800056c:	4a0c      	ldr	r2, [pc, #48]	@ (80005a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a09      	ldr	r2, [pc, #36]	@ (80005a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000580:	4c09      	ldr	r4, [pc, #36]	@ (80005a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800058e:	f002 f8df 	bl	8002750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000592:	f7ff fde3 	bl	800015c <main>
  bx lr
 8000596:	4770      	bx	lr
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80005a0:	08003808 	.word	0x08003808
  ldr r2, =_sbss
 80005a4:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80005a8:	20000374 	.word	0x20000374

080005ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC1_2_IRQHandler>
	...

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <HAL_Init+0x28>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <HAL_Init+0x28>)
 80005ba:	f043 0310 	orr.w	r3, r3, #16
 80005be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c0:	2003      	movs	r0, #3
 80005c2:	f000 f947 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 f808 	bl	80005dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005cc:	f7ff fee8 	bl	80003a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40022000 	.word	0x40022000

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e4:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <HAL_InitTick+0x54>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <HAL_InitTick+0x58>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f95f 	bl	80008be <HAL_SYSTICK_Config>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e00e      	b.n	8000628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d80a      	bhi.n	8000626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000610:	2200      	movs	r2, #0
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
 8000618:	f000 f927 	bl	800086a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800061c:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <HAL_InitTick+0x5c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000000 	.word	0x20000000
 8000634:	20000008 	.word	0x20000008
 8000638:	20000004 	.word	0x20000004

0800063c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000640:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_IncTick+0x1c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_IncTick+0x20>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a03      	ldr	r2, [pc, #12]	@ (800065c <HAL_IncTick+0x20>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000008 	.word	0x20000008
 800065c:	2000011c 	.word	0x2000011c

08000660 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b02      	ldr	r3, [pc, #8]	@ (8000670 <HAL_GetTick+0x10>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	2000011c 	.word	0x2000011c

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff0 	bl	8000660 <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <HAL_Delay+0x44>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffe0 	bl	8000660 <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f7      	bhi.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000008 	.word	0x20000008

080006bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ee:	4a04      	ldr	r2, [pc, #16]	@ (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	60d3      	str	r3, [r2, #12]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <__NVIC_GetPriorityGrouping+0x18>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	f003 0307 	and.w	r3, r3, #7
}
 8000712:	4618      	mov	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db0b      	blt.n	800074a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f003 021f 	and.w	r2, r3, #31
 8000738:	4906      	ldr	r1, [pc, #24]	@ (8000754 <__NVIC_EnableIRQ+0x34>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	2001      	movs	r0, #1
 8000742:	fa00 f202 	lsl.w	r2, r0, r2
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	@ (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	@ (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	@ 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	@ 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000820:	d301      	bcc.n	8000826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000822:	2301      	movs	r3, #1
 8000824:	e00f      	b.n	8000846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000826:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <SysTick_Config+0x40>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082e:	210f      	movs	r1, #15
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f7ff ff90 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <SysTick_Config+0x40>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <SysTick_Config+0x40>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff2d 	bl	80006bc <__NVIC_SetPriorityGrouping>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff42 	bl	8000704 <__NVIC_GetPriorityGrouping>
 8000880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	f7ff ff90 	bl	80007ac <NVIC_EncodePriority>
 800088c:	4602      	mov	r2, r0
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff5f 	bl	8000758 <__NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff35 	bl	8000720 <__NVIC_EnableIRQ>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ffa2 	bl	8000810 <SysTick_Config>
 80008cc:	4603      	mov	r3, r0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008da:	f001 f841 	bl	8001960 <HAL_SYSTICK_Callback>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b08b      	sub	sp, #44	@ 0x2c
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f6:	e169      	b.n	8000bcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008f8:	2201      	movs	r2, #1
 80008fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	69fa      	ldr	r2, [r7, #28]
 8000908:	4013      	ands	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	429a      	cmp	r2, r3
 8000912:	f040 8158 	bne.w	8000bc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	4a9a      	ldr	r2, [pc, #616]	@ (8000b84 <HAL_GPIO_Init+0x2a0>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d05e      	beq.n	80009de <HAL_GPIO_Init+0xfa>
 8000920:	4a98      	ldr	r2, [pc, #608]	@ (8000b84 <HAL_GPIO_Init+0x2a0>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d875      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 8000926:	4a98      	ldr	r2, [pc, #608]	@ (8000b88 <HAL_GPIO_Init+0x2a4>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d058      	beq.n	80009de <HAL_GPIO_Init+0xfa>
 800092c:	4a96      	ldr	r2, [pc, #600]	@ (8000b88 <HAL_GPIO_Init+0x2a4>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d86f      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 8000932:	4a96      	ldr	r2, [pc, #600]	@ (8000b8c <HAL_GPIO_Init+0x2a8>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d052      	beq.n	80009de <HAL_GPIO_Init+0xfa>
 8000938:	4a94      	ldr	r2, [pc, #592]	@ (8000b8c <HAL_GPIO_Init+0x2a8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d869      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 800093e:	4a94      	ldr	r2, [pc, #592]	@ (8000b90 <HAL_GPIO_Init+0x2ac>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d04c      	beq.n	80009de <HAL_GPIO_Init+0xfa>
 8000944:	4a92      	ldr	r2, [pc, #584]	@ (8000b90 <HAL_GPIO_Init+0x2ac>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d863      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 800094a:	4a92      	ldr	r2, [pc, #584]	@ (8000b94 <HAL_GPIO_Init+0x2b0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d046      	beq.n	80009de <HAL_GPIO_Init+0xfa>
 8000950:	4a90      	ldr	r2, [pc, #576]	@ (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d85d      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 8000956:	2b12      	cmp	r3, #18
 8000958:	d82a      	bhi.n	80009b0 <HAL_GPIO_Init+0xcc>
 800095a:	2b12      	cmp	r3, #18
 800095c:	d859      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 800095e:	a201      	add	r2, pc, #4	@ (adr r2, 8000964 <HAL_GPIO_Init+0x80>)
 8000960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000964:	080009df 	.word	0x080009df
 8000968:	080009b9 	.word	0x080009b9
 800096c:	080009cb 	.word	0x080009cb
 8000970:	08000a0d 	.word	0x08000a0d
 8000974:	08000a13 	.word	0x08000a13
 8000978:	08000a13 	.word	0x08000a13
 800097c:	08000a13 	.word	0x08000a13
 8000980:	08000a13 	.word	0x08000a13
 8000984:	08000a13 	.word	0x08000a13
 8000988:	08000a13 	.word	0x08000a13
 800098c:	08000a13 	.word	0x08000a13
 8000990:	08000a13 	.word	0x08000a13
 8000994:	08000a13 	.word	0x08000a13
 8000998:	08000a13 	.word	0x08000a13
 800099c:	08000a13 	.word	0x08000a13
 80009a0:	08000a13 	.word	0x08000a13
 80009a4:	08000a13 	.word	0x08000a13
 80009a8:	080009c1 	.word	0x080009c1
 80009ac:	080009d5 	.word	0x080009d5
 80009b0:	4a79      	ldr	r2, [pc, #484]	@ (8000b98 <HAL_GPIO_Init+0x2b4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d013      	beq.n	80009de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009b6:	e02c      	b.n	8000a12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	623b      	str	r3, [r7, #32]
          break;
 80009be:	e029      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	3304      	adds	r3, #4
 80009c6:	623b      	str	r3, [r7, #32]
          break;
 80009c8:	e024      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	3308      	adds	r3, #8
 80009d0:	623b      	str	r3, [r7, #32]
          break;
 80009d2:	e01f      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	330c      	adds	r3, #12
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	e01a      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d102      	bne.n	80009ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e6:	2304      	movs	r3, #4
 80009e8:	623b      	str	r3, [r7, #32]
          break;
 80009ea:	e013      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d105      	bne.n	8000a00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f4:	2308      	movs	r3, #8
 80009f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	69fa      	ldr	r2, [r7, #28]
 80009fc:	611a      	str	r2, [r3, #16]
          break;
 80009fe:	e009      	b.n	8000a14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a00:	2308      	movs	r3, #8
 8000a02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	615a      	str	r2, [r3, #20]
          break;
 8000a0a:	e003      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
          break;
 8000a10:	e000      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          break;
 8000a12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d801      	bhi.n	8000a1e <HAL_GPIO_Init+0x13a>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	e001      	b.n	8000a22 <HAL_GPIO_Init+0x13e>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3304      	adds	r3, #4
 8000a22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	2bff      	cmp	r3, #255	@ 0xff
 8000a28:	d802      	bhi.n	8000a30 <HAL_GPIO_Init+0x14c>
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	e002      	b.n	8000a36 <HAL_GPIO_Init+0x152>
 8000a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a32:	3b08      	subs	r3, #8
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	fa01 f303 	lsl.w	r3, r1, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	401a      	ands	r2, r3
 8000a48:	6a39      	ldr	r1, [r7, #32]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	431a      	orrs	r2, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f000 80b1 	beq.w	8000bc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a64:	4b4d      	ldr	r3, [pc, #308]	@ (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a4c      	ldr	r2, [pc, #304]	@ (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b4a      	ldr	r3, [pc, #296]	@ (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a7c:	4a48      	ldr	r2, [pc, #288]	@ (8000ba0 <HAL_GPIO_Init+0x2bc>)
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3302      	adds	r3, #2
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	220f      	movs	r2, #15
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a40      	ldr	r2, [pc, #256]	@ (8000ba4 <HAL_GPIO_Init+0x2c0>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d013      	beq.n	8000ad0 <HAL_GPIO_Init+0x1ec>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8000ba8 <HAL_GPIO_Init+0x2c4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d00d      	beq.n	8000acc <HAL_GPIO_Init+0x1e8>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bac <HAL_GPIO_Init+0x2c8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d007      	beq.n	8000ac8 <HAL_GPIO_Init+0x1e4>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a3d      	ldr	r2, [pc, #244]	@ (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d101      	bne.n	8000ac4 <HAL_GPIO_Init+0x1e0>
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	e006      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	e004      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000ac8:	2302      	movs	r3, #2
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ad4:	f002 0203 	and.w	r2, r2, #3
 8000ad8:	0092      	lsls	r2, r2, #2
 8000ada:	4093      	lsls	r3, r2
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ae2:	492f      	ldr	r1, [pc, #188]	@ (8000ba0 <HAL_GPIO_Init+0x2bc>)
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	3302      	adds	r3, #2
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d006      	beq.n	8000b0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000afc:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	492c      	ldr	r1, [pc, #176]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	608b      	str	r3, [r1, #8]
 8000b08:	e006      	b.n	8000b18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	4928      	ldr	r1, [pc, #160]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d006      	beq.n	8000b32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b24:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b26:	68da      	ldr	r2, [r3, #12]
 8000b28:	4922      	ldr	r1, [pc, #136]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	60cb      	str	r3, [r1, #12]
 8000b30:	e006      	b.n	8000b40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	491e      	ldr	r1, [pc, #120]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d006      	beq.n	8000b5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	4918      	ldr	r1, [pc, #96]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	604b      	str	r3, [r1, #4]
 8000b58:	e006      	b.n	8000b68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b5a:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	4914      	ldr	r1, [pc, #80]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d021      	beq.n	8000bb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	490e      	ldr	r1, [pc, #56]	@ (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	600b      	str	r3, [r1, #0]
 8000b80:	e021      	b.n	8000bc6 <HAL_GPIO_Init+0x2e2>
 8000b82:	bf00      	nop
 8000b84:	10320000 	.word	0x10320000
 8000b88:	10310000 	.word	0x10310000
 8000b8c:	10220000 	.word	0x10220000
 8000b90:	10210000 	.word	0x10210000
 8000b94:	10120000 	.word	0x10120000
 8000b98:	10110000 	.word	0x10110000
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010000 	.word	0x40010000
 8000ba4:	40010800 	.word	0x40010800
 8000ba8:	40010c00 	.word	0x40010c00
 8000bac:	40011000 	.word	0x40011000
 8000bb0:	40011400 	.word	0x40011400
 8000bb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <HAL_GPIO_Init+0x304>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	4909      	ldr	r1, [pc, #36]	@ (8000be8 <HAL_GPIO_Init+0x304>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc8:	3301      	adds	r3, #1
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f47f ae8e 	bne.w	80008f8 <HAL_GPIO_Init+0x14>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	372c      	adds	r7, #44	@ 0x2c
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	40010400 	.word	0x40010400

08000bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bfc:	787b      	ldrb	r3, [r7, #1]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c08:	e003      	b.n	8000c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	041a      	lsls	r2, r3, #16
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	611a      	str	r2, [r3, #16]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c2e:	887a      	ldrh	r2, [r7, #2]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4013      	ands	r3, r2
 8000c34:	041a      	lsls	r2, r3, #16
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43d9      	mvns	r1, r3
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	611a      	str	r2, [r3, #16]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c5c:	695a      	ldr	r2, [r3, #20]
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	4013      	ands	r3, r2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d006      	beq.n	8000c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f806 	bl	8000c80 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40010400 	.word	0x40010400

08000c80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e272      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8087 	beq.w	8000dc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cb4:	4b92      	ldr	r3, [pc, #584]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d00c      	beq.n	8000cda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc0:	4b8f      	ldr	r3, [pc, #572]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d112      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x5e>
 8000ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd8:	d10b      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cda:	4b89      	ldr	r3, [pc, #548]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d06c      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x12c>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d168      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e24c      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cfa:	d106      	bne.n	8000d0a <HAL_RCC_OscConfig+0x76>
 8000cfc:	4b80      	ldr	r3, [pc, #512]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a7f      	ldr	r2, [pc, #508]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e02e      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x98>
 8000d12:	4b7b      	ldr	r3, [pc, #492]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a7a      	ldr	r2, [pc, #488]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b78      	ldr	r3, [pc, #480]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a77      	ldr	r2, [pc, #476]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e01d      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d34:	d10c      	bne.n	8000d50 <HAL_RCC_OscConfig+0xbc>
 8000d36:	4b72      	ldr	r3, [pc, #456]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a71      	ldr	r2, [pc, #452]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b6f      	ldr	r3, [pc, #444]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a6e      	ldr	r2, [pc, #440]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e00b      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d50:	4b6b      	ldr	r3, [pc, #428]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a6a      	ldr	r2, [pc, #424]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b68      	ldr	r3, [pc, #416]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a67      	ldr	r2, [pc, #412]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d013      	beq.n	8000d98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fc76 	bl	8000660 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d78:	f7ff fc72 	bl	8000660 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b64      	cmp	r3, #100	@ 0x64
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e200      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f0      	beq.n	8000d78 <HAL_RCC_OscConfig+0xe4>
 8000d96:	e014      	b.n	8000dc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fc62 	bl	8000660 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da0:	f7ff fc5e 	bl	8000660 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b64      	cmp	r3, #100	@ 0x64
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e1ec      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db2:	4b53      	ldr	r3, [pc, #332]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f0      	bne.n	8000da0 <HAL_RCC_OscConfig+0x10c>
 8000dbe:	e000      	b.n	8000dc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d063      	beq.n	8000e96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dce:	4b4c      	ldr	r3, [pc, #304]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00b      	beq.n	8000df2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dda:	4b49      	ldr	r3, [pc, #292]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d11c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x18c>
 8000de6:	4b46      	ldr	r3, [pc, #280]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d116      	bne.n	8000e20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df2:	4b43      	ldr	r3, [pc, #268]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <HAL_RCC_OscConfig+0x176>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d001      	beq.n	8000e0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e1c0      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	4939      	ldr	r1, [pc, #228]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1e:	e03a      	b.n	8000e96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d020      	beq.n	8000e6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e28:	4b36      	ldr	r3, [pc, #216]	@ (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fc17 	bl	8000660 <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e34:	e008      	b.n	8000e48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e36:	f7ff fc13 	bl	8000660 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e1a1      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e48:	4b2d      	ldr	r3, [pc, #180]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f0      	beq.n	8000e36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e54:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4927      	ldr	r1, [pc, #156]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	600b      	str	r3, [r1, #0]
 8000e68:	e015      	b.n	8000e96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e6a:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fbf6 	bl	8000660 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e78:	f7ff fbf2 	bl	8000660 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e180      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f0      	bne.n	8000e78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d03a      	beq.n	8000f18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d019      	beq.n	8000ede <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <HAL_RCC_OscConfig+0x274>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fbd6 	bl	8000660 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fbd2 	bl	8000660 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e160      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f0      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 face 	bl	8001478 <RCC_Delay>
 8000edc:	e01c      	b.n	8000f18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_RCC_OscConfig+0x274>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fbbc 	bl	8000660 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eea:	e00f      	b.n	8000f0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fbb8 	bl	8000660 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d908      	bls.n	8000f0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e146      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	42420000 	.word	0x42420000
 8000f08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0c:	4b92      	ldr	r3, [pc, #584]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1e9      	bne.n	8000eec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80a6 	beq.w	8001072 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10d      	bne.n	8000f52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b88      	ldr	r3, [pc, #544]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a87      	ldr	r2, [pc, #540]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b85      	ldr	r3, [pc, #532]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f52:	4b82      	ldr	r3, [pc, #520]	@ (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d118      	bne.n	8000f90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a7e      	ldr	r2, [pc, #504]	@ (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fb79 	bl	8000660 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f72:	f7ff fb75 	bl	8000660 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b64      	cmp	r3, #100	@ 0x64
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e103      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f84:	4b75      	ldr	r3, [pc, #468]	@ (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f0      	beq.n	8000f72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d106      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x312>
 8000f98:	4b6f      	ldr	r3, [pc, #444]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6213      	str	r3, [r2, #32]
 8000fa4:	e02d      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x334>
 8000fae:	4b6a      	ldr	r3, [pc, #424]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4a69      	ldr	r2, [pc, #420]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	6213      	str	r3, [r2, #32]
 8000fba:	4b67      	ldr	r3, [pc, #412]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4a66      	ldr	r2, [pc, #408]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	f023 0304 	bic.w	r3, r3, #4
 8000fc4:	6213      	str	r3, [r2, #32]
 8000fc6:	e01c      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d10c      	bne.n	8000fea <HAL_RCC_OscConfig+0x356>
 8000fd0:	4b61      	ldr	r3, [pc, #388]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4a60      	ldr	r2, [pc, #384]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6213      	str	r3, [r2, #32]
 8000fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6213      	str	r3, [r2, #32]
 8000fe8:	e00b      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fea:	4b5b      	ldr	r3, [pc, #364]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a5a      	ldr	r2, [pc, #360]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	4b58      	ldr	r3, [pc, #352]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a57      	ldr	r2, [pc, #348]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	f023 0304 	bic.w	r3, r3, #4
 8001000:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d015      	beq.n	8001036 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100a:	f7ff fb29 	bl	8000660 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001010:	e00a      	b.n	8001028 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001012:	f7ff fb25 	bl	8000660 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001020:	4293      	cmp	r3, r2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e0b1      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001028:	4b4b      	ldr	r3, [pc, #300]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0ee      	beq.n	8001012 <HAL_RCC_OscConfig+0x37e>
 8001034:	e014      	b.n	8001060 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fb13 	bl	8000660 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800103c:	e00a      	b.n	8001054 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f7ff fb0f 	bl	8000660 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800104c:	4293      	cmp	r3, r2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e09b      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001054:	4b40      	ldr	r3, [pc, #256]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ee      	bne.n	800103e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d105      	bne.n	8001072 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001066:	4b3c      	ldr	r3, [pc, #240]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a3b      	ldr	r2, [pc, #236]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001070:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8087 	beq.w	800118a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800107c:	4b36      	ldr	r3, [pc, #216]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b08      	cmp	r3, #8
 8001086:	d061      	beq.n	800114c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d146      	bne.n	800111e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001090:	4b33      	ldr	r3, [pc, #204]	@ (8001160 <HAL_RCC_OscConfig+0x4cc>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fae3 	bl	8000660 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109e:	f7ff fadf 	bl	8000660 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e06d      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b0:	4b29      	ldr	r3, [pc, #164]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f0      	bne.n	800109e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c4:	d108      	bne.n	80010d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010c6:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	4921      	ldr	r1, [pc, #132]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a19      	ldr	r1, [r3, #32]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e8:	430b      	orrs	r3, r1
 80010ea:	491b      	ldr	r1, [pc, #108]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <HAL_RCC_OscConfig+0x4cc>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fab3 	bl	8000660 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fe:	f7ff faaf 	bl	8000660 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e03d      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x46a>
 800111c:	e035      	b.n	800118a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <HAL_RCC_OscConfig+0x4cc>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fa9c 	bl	8000660 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112c:	f7ff fa98 	bl	8000660 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e026      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x498>
 800114a:	e01e      	b.n	800118a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d107      	bne.n	8001164 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e019      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
 8001158:	40021000 	.word	0x40021000
 800115c:	40007000 	.word	0x40007000
 8001160:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <HAL_RCC_OscConfig+0x500>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	429a      	cmp	r2, r3
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001182:	429a      	cmp	r2, r3
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e0d0      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d910      	bls.n	80011dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b67      	ldr	r3, [pc, #412]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 0207 	bic.w	r2, r3, #7
 80011c2:	4965      	ldr	r1, [pc, #404]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b63      	ldr	r3, [pc, #396]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0b8      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d020      	beq.n	800122a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f4:	4b59      	ldr	r3, [pc, #356]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a58      	ldr	r2, [pc, #352]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800120c:	4b53      	ldr	r3, [pc, #332]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a52      	ldr	r2, [pc, #328]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001216:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001218:	4b50      	ldr	r3, [pc, #320]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	494d      	ldr	r1, [pc, #308]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d040      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	4b47      	ldr	r3, [pc, #284]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d115      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e07f      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d107      	bne.n	8001266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001256:	4b41      	ldr	r3, [pc, #260]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e073      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001266:	4b3d      	ldr	r3, [pc, #244]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e06b      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001276:	4b39      	ldr	r3, [pc, #228]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f023 0203 	bic.w	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4936      	ldr	r1, [pc, #216]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001288:	f7ff f9ea 	bl	8000660 <HAL_GetTick>
 800128c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128e:	e00a      	b.n	80012a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001290:	f7ff f9e6 	bl	8000660 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e053      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a6:	4b2d      	ldr	r3, [pc, #180]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 020c 	and.w	r2, r3, #12
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d1eb      	bne.n	8001290 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d210      	bcs.n	80012e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c6:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 0207 	bic.w	r2, r3, #7
 80012ce:	4922      	ldr	r1, [pc, #136]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d6:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e032      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4916      	ldr	r1, [pc, #88]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d009      	beq.n	8001326 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	490e      	ldr	r1, [pc, #56]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001326:	f000 f821 	bl	800136c <HAL_RCC_GetSysClockFreq>
 800132a:	4602      	mov	r2, r0
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	490a      	ldr	r1, [pc, #40]	@ (8001360 <HAL_RCC_ClockConfig+0x1c8>)
 8001338:	5ccb      	ldrb	r3, [r1, r3]
 800133a:	fa22 f303 	lsr.w	r3, r2, r3
 800133e:	4a09      	ldr	r2, [pc, #36]	@ (8001364 <HAL_RCC_ClockConfig+0x1cc>)
 8001340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_RCC_ClockConfig+0x1d0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f948 	bl	80005dc <HAL_InitTick>

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000
 800135c:	40021000 	.word	0x40021000
 8001360:	08003778 	.word	0x08003778
 8001364:	20000000 	.word	0x20000000
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001386:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <HAL_RCC_GetSysClockFreq+0x94>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b04      	cmp	r3, #4
 8001394:	d002      	beq.n	800139c <HAL_RCC_GetSysClockFreq+0x30>
 8001396:	2b08      	cmp	r3, #8
 8001398:	d003      	beq.n	80013a2 <HAL_RCC_GetSysClockFreq+0x36>
 800139a:	e027      	b.n	80013ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <HAL_RCC_GetSysClockFreq+0x98>)
 800139e:	613b      	str	r3, [r7, #16]
      break;
 80013a0:	e027      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	0c9b      	lsrs	r3, r3, #18
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	4a17      	ldr	r2, [pc, #92]	@ (8001408 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d010      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_RCC_GetSysClockFreq+0x94>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	0c5b      	lsrs	r3, r3, #17
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	4a11      	ldr	r2, [pc, #68]	@ (800140c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013c6:	5cd3      	ldrb	r3, [r2, r3]
 80013c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ce:	fb03 f202 	mul.w	r2, r3, r2
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e004      	b.n	80013e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a0c      	ldr	r2, [pc, #48]	@ (8001410 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	613b      	str	r3, [r7, #16]
      break;
 80013ea:	e002      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ee:	613b      	str	r3, [r7, #16]
      break;
 80013f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013f2:	693b      	ldr	r3, [r7, #16]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	007a1200 	.word	0x007a1200
 8001408:	08003790 	.word	0x08003790
 800140c:	080037a0 	.word	0x080037a0
 8001410:	003d0900 	.word	0x003d0900

08001414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001418:	4b02      	ldr	r3, [pc, #8]	@ (8001424 <HAL_RCC_GetHCLKFreq+0x10>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000000 	.word	0x20000000

08001428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800142c:	f7ff fff2 	bl	8001414 <HAL_RCC_GetHCLKFreq>
 8001430:	4602      	mov	r2, r0
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	4903      	ldr	r1, [pc, #12]	@ (800144c <HAL_RCC_GetPCLK1Freq+0x24>)
 800143e:	5ccb      	ldrb	r3, [r1, r3]
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001444:	4618      	mov	r0, r3
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	08003788 	.word	0x08003788

08001450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001454:	f7ff ffde 	bl	8001414 <HAL_RCC_GetHCLKFreq>
 8001458:	4602      	mov	r2, r0
 800145a:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	0adb      	lsrs	r3, r3, #11
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	4903      	ldr	r1, [pc, #12]	@ (8001474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001466:	5ccb      	ldrb	r3, [r1, r3]
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	08003788 	.word	0x08003788

08001478 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <RCC_Delay+0x34>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <RCC_Delay+0x38>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	0a5b      	lsrs	r3, r3, #9
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001494:	bf00      	nop
  }
  while (Delay --);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1e5a      	subs	r2, r3, #1
 800149a:	60fa      	str	r2, [r7, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f9      	bne.n	8001494 <RCC_Delay+0x1c>
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	20000000 	.word	0x20000000
 80014b0:	10624dd3 	.word	0x10624dd3

080014b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e042      	b.n	800154c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d106      	bne.n	80014e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7fe ff92 	bl	8000404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2224      	movs	r2, #36	@ 0x24
 80014e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f82b 	bl	8001554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800150c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800151c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800152c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2220      	movs	r2, #32
 8001538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2220      	movs	r2, #32
 8001540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	4313      	orrs	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800158e:	f023 030c 	bic.w	r3, r3, #12
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	430b      	orrs	r3, r1
 800159a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001668 <UART_SetConfig+0x114>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d103      	bne.n	80015c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015bc:	f7ff ff48 	bl	8001450 <HAL_RCC_GetPCLK2Freq>
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	e002      	b.n	80015ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80015c4:	f7ff ff30 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
 80015c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	009a      	lsls	r2, r3, #2
 80015d4:	441a      	add	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e0:	4a22      	ldr	r2, [pc, #136]	@ (800166c <UART_SetConfig+0x118>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	0119      	lsls	r1, r3, #4
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	009a      	lsls	r2, r3, #2
 80015f4:	441a      	add	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001600:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <UART_SetConfig+0x118>)
 8001602:	fba3 0302 	umull	r0, r3, r3, r2
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2064      	movs	r0, #100	@ 0x64
 800160a:	fb00 f303 	mul.w	r3, r0, r3
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	3332      	adds	r3, #50	@ 0x32
 8001614:	4a15      	ldr	r2, [pc, #84]	@ (800166c <UART_SetConfig+0x118>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001620:	4419      	add	r1, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	009a      	lsls	r2, r3, #2
 800162c:	441a      	add	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	fbb2 f2f3 	udiv	r2, r2, r3
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <UART_SetConfig+0x118>)
 800163a:	fba3 0302 	umull	r0, r3, r3, r2
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2064      	movs	r0, #100	@ 0x64
 8001642:	fb00 f303 	mul.w	r3, r0, r3
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	3332      	adds	r3, #50	@ 0x32
 800164c:	4a07      	ldr	r2, [pc, #28]	@ (800166c <UART_SetConfig+0x118>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	f003 020f 	and.w	r2, r3, #15
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	440a      	add	r2, r1
 800165e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40013800 	.word	0x40013800
 800166c:	51eb851f 	.word	0x51eb851f

08001670 <app_init>:
 * The function definition consists of actual statements which are executed
 * when the function is called (i.e. when the program control comes to the
 * function).
 */
void app_init(void)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b085      	sub	sp, #20
 8001674:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8001676:	b672      	cpsid	i
 8001678:	4b43      	ldr	r3, [pc, #268]	@ (8001788 <app_init+0x118>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a43      	ldr	r2, [pc, #268]	@ (800178c <app_init+0x11c>)
 800167e:	213f      	movs	r1, #63	@ 0x3f
 8001680:	4618      	mov	r0, r3
 8001682:	f000 ff99 	bl	80025b8 <sniprintf>
 8001686:	4603      	mov	r3, r0
 8001688:	4a41      	ldr	r2, [pc, #260]	@ (8001790 <app_init+0x120>)
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b3e      	ldr	r3, [pc, #248]	@ (8001788 <app_init+0x118>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f973 	bl	800197c <logger_log_print_>
 8001696:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 8001698:	b672      	cpsid	i
 800169a:	4b3b      	ldr	r3, [pc, #236]	@ (8001788 <app_init+0x118>)
 800169c:	681c      	ldr	r4, [r3, #0]
 800169e:	f7fe ffdf 	bl	8000660 <HAL_GetTick>
 80016a2:	4603      	mov	r3, r0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001794 <app_init+0x124>)
 80016a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001798 <app_init+0x128>)
 80016aa:	213f      	movs	r1, #63	@ 0x3f
 80016ac:	4620      	mov	r0, r4
 80016ae:	f000 ff83 	bl	80025b8 <sniprintf>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a36      	ldr	r2, [pc, #216]	@ (8001790 <app_init+0x120>)
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <app_init+0x118>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f95d 	bl	800197c <logger_log_print_>
 80016c2:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 80016c4:	b672      	cpsid	i
 80016c6:	4b30      	ldr	r3, [pc, #192]	@ (8001788 <app_init+0x118>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a34      	ldr	r2, [pc, #208]	@ (800179c <app_init+0x12c>)
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	213f      	movs	r1, #63	@ 0x3f
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 ff71 	bl	80025b8 <sniprintf>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001790 <app_init+0x120>)
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001788 <app_init+0x118>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f94b 	bl	800197c <logger_log_print_>
 80016e6:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 80016e8:	b672      	cpsid	i
 80016ea:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <app_init+0x118>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a2c      	ldr	r2, [pc, #176]	@ (80017a0 <app_init+0x130>)
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	213f      	movs	r1, #63	@ 0x3f
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 ff5f 	bl	80025b8 <sniprintf>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a24      	ldr	r2, [pc, #144]	@ (8001790 <app_init+0x120>)
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <app_init+0x118>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f939 	bl	800197c <logger_log_print_>
 800170a:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 800170c:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <app_init+0x134>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 8001712:	b672      	cpsid	i
 8001714:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <app_init+0x118>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <app_init+0x134>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <app_init+0x138>)
 8001720:	4a22      	ldr	r2, [pc, #136]	@ (80017ac <app_init+0x13c>)
 8001722:	213f      	movs	r1, #63	@ 0x3f
 8001724:	f000 ff48 	bl	80025b8 <sniprintf>
 8001728:	4603      	mov	r3, r0
 800172a:	4a19      	ldr	r2, [pc, #100]	@ (8001790 <app_init+0x120>)
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <app_init+0x118>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f922 	bl	800197c <logger_log_print_>
 8001738:	b662      	cpsie	i

	for (index = 0; index < (sizeof(task_x_init_list)/sizeof(task_x_t)); index++)
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	e00d      	b.n	800175c <app_init+0xec>
		 * A function call is a statement that instructs the compiler to execute
		 * the function.
		 * We use the function name and parameters in the function call.
		 */
		/* Run task_x_init */
		(*task_x_init_list[index].p_task_x)(task_x_init_list[index].parameters);
 8001740:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <app_init+0x140>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001748:	4919      	ldr	r1, [pc, #100]	@ (80017b0 <app_init+0x140>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	4790      	blx	r2
	for (index = 0; index < (sizeof(task_x_init_list)/sizeof(task_x_t)); index++)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3301      	adds	r3, #1
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d9ee      	bls.n	8001740 <app_init+0xd0>
	}

	cycle_counter_init();
 8001762:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <app_init+0x144>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	4a13      	ldr	r2, [pc, #76]	@ (80017b4 <app_init+0x144>)
 8001768:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800176c:	60d3      	str	r3, [r2, #12]
 800176e:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <app_init+0x148>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <app_init+0x148>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0f      	ldr	r2, [pc, #60]	@ (80017b8 <app_init+0x148>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	080037a4 	.word	0x080037a4
 800178c:	08003574 	.word	0x08003574
 8001790:	20000168 	.word	0x20000168
 8001794:	08003578 	.word	0x08003578
 8001798:	08003584 	.word	0x08003584
 800179c:	2000003c 	.word	0x2000003c
 80017a0:	20000040 	.word	0x20000040
 80017a4:	20000120 	.word	0x20000120
 80017a8:	080035a8 	.word	0x080035a8
 80017ac:	080035b4 	.word	0x080035b4
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	e000edf0 	.word	0xe000edf0
 80017b8:	e0001000 	.word	0xe0001000

080017bc <app_update>:

void app_update(void)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b089      	sub	sp, #36	@ 0x24
 80017c0:	af04      	add	r7, sp, #16
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;

	/* Update App Counter */
	g_app_cnt++;
 80017c2:	4b55      	ldr	r3, [pc, #340]	@ (8001918 <app_update+0x15c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a53      	ldr	r2, [pc, #332]	@ (8001918 <app_update+0x15c>)
 80017ca:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("\r\n");
 80017cc:	b672      	cpsid	i
 80017ce:	4b53      	ldr	r3, [pc, #332]	@ (800191c <app_update+0x160>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a53      	ldr	r2, [pc, #332]	@ (8001920 <app_update+0x164>)
 80017d4:	213f      	movs	r1, #63	@ 0x3f
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 feee 	bl	80025b8 <sniprintf>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a51      	ldr	r2, [pc, #324]	@ (8001924 <app_update+0x168>)
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b4e      	ldr	r3, [pc, #312]	@ (800191c <app_update+0x160>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f8c8 	bl	800197c <logger_log_print_>
 80017ec:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_update), (int)HAL_GetTick());
 80017ee:	b672      	cpsid	i
 80017f0:	4b4a      	ldr	r3, [pc, #296]	@ (800191c <app_update+0x160>)
 80017f2:	681c      	ldr	r4, [r3, #0]
 80017f4:	f7fe ff34 	bl	8000660 <HAL_GetTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001928 <app_update+0x16c>)
 80017fe:	4a4b      	ldr	r2, [pc, #300]	@ (800192c <app_update+0x170>)
 8001800:	213f      	movs	r1, #63	@ 0x3f
 8001802:	4620      	mov	r0, r4
 8001804:	f000 fed8 	bl	80025b8 <sniprintf>
 8001808:	4603      	mov	r3, r0
 800180a:	4a46      	ldr	r2, [pc, #280]	@ (8001924 <app_update+0x168>)
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b43      	ldr	r3, [pc, #268]	@ (800191c <app_update+0x160>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f8b2 	bl	800197c <logger_log_print_>
 8001818:	b662      	cpsie	i

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 800181a:	b672      	cpsid	i
 800181c:	4b3f      	ldr	r3, [pc, #252]	@ (800191c <app_update+0x160>)
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <app_update+0x15c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	4b42      	ldr	r3, [pc, #264]	@ (8001930 <app_update+0x174>)
 8001828:	4a42      	ldr	r2, [pc, #264]	@ (8001934 <app_update+0x178>)
 800182a:	213f      	movs	r1, #63	@ 0x3f
 800182c:	f000 fec4 	bl	80025b8 <sniprintf>
 8001830:	4603      	mov	r3, r0
 8001832:	4a3c      	ldr	r2, [pc, #240]	@ (8001924 <app_update+0x168>)
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b39      	ldr	r3, [pc, #228]	@ (800191c <app_update+0x160>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f89e 	bl	800197c <logger_log_print_>
 8001840:	b662      	cpsie	i

	for (index = 0; index < (sizeof(task_x_update_list)/sizeof(task_x_t)); index++)
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	e05f      	b.n	8001908 <app_update+0x14c>
	{
		/* Print out: Cycle Counter Reset */
		LOGGER_LOG("\r\n");
 8001848:	b672      	cpsid	i
 800184a:	4b34      	ldr	r3, [pc, #208]	@ (800191c <app_update+0x160>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a34      	ldr	r2, [pc, #208]	@ (8001920 <app_update+0x164>)
 8001850:	213f      	movs	r1, #63	@ 0x3f
 8001852:	4618      	mov	r0, r3
 8001854:	f000 feb0 	bl	80025b8 <sniprintf>
 8001858:	4603      	mov	r3, r0
 800185a:	4a32      	ldr	r2, [pc, #200]	@ (8001924 <app_update+0x168>)
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b2f      	ldr	r3, [pc, #188]	@ (800191c <app_update+0x160>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f88a 	bl	800197c <logger_log_print_>
 8001868:	b662      	cpsie	i
		LOGGER_LOG(" %s\r\n", GET_NAME(cycle_counter_reset));
 800186a:	b672      	cpsid	i
 800186c:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <app_update+0x160>)
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	4b31      	ldr	r3, [pc, #196]	@ (8001938 <app_update+0x17c>)
 8001872:	4a32      	ldr	r2, [pc, #200]	@ (800193c <app_update+0x180>)
 8001874:	213f      	movs	r1, #63	@ 0x3f
 8001876:	f000 fe9f 	bl	80025b8 <sniprintf>
 800187a:	4603      	mov	r3, r0
 800187c:	4a29      	ldr	r2, [pc, #164]	@ (8001924 <app_update+0x168>)
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b26      	ldr	r3, [pc, #152]	@ (800191c <app_update+0x160>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f879 	bl	800197c <logger_log_print_>
 800188a:	b662      	cpsie	i

		HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
 800188c:	2120      	movs	r1, #32
 800188e:	482c      	ldr	r0, [pc, #176]	@ (8001940 <app_update+0x184>)
 8001890:	f7ff f9c4 	bl	8000c1c <HAL_GPIO_TogglePin>
		cycle_counter_reset();
 8001894:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <app_update+0x188>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
		 * A function call is a statement that instructs the compiler to execute
		 * the function.
		 * We use the function name and parameters in the function call.
		 */
		/* Run task_x_update */
		(*task_x_update_list[index].p_task_x)(task_x_update_list[index].parameters);
 800189a:	4a2b      	ldr	r2, [pc, #172]	@ (8001948 <app_update+0x18c>)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80018a2:	4929      	ldr	r1, [pc, #164]	@ (8001948 <app_update+0x18c>)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	4790      	blx	r2

		cycle_counter = cycle_counter_get();
 80018b0:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <app_update+0x188>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60bb      	str	r3, [r7, #8]
		cycle_counter_time_us = cycle_counter_time_us();
 80018b6:	4b23      	ldr	r3, [pc, #140]	@ (8001944 <app_update+0x188>)
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4b24      	ldr	r3, [pc, #144]	@ (800194c <app_update+0x190>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4924      	ldr	r1, [pc, #144]	@ (8001950 <app_update+0x194>)
 80018c0:	fba1 1303 	umull	r1, r3, r1, r3
 80018c4:	0c9b      	lsrs	r3, r3, #18
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	607b      	str	r3, [r7, #4]
		HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
 80018cc:	2120      	movs	r1, #32
 80018ce:	481c      	ldr	r0, [pc, #112]	@ (8001940 <app_update+0x184>)
 80018d0:	f7ff f9a4 	bl	8000c1c <HAL_GPIO_TogglePin>

		/* Print out: Cycle Counter */
		LOGGER_LOG(" %s: %lu - %s: %lu uS\r\n", GET_NAME(cycle_counter), cycle_counter, GET_NAME(cycle_counter_time_us), cycle_counter_time_us);
 80018d4:	b672      	cpsid	i
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <app_update+0x160>)
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <app_update+0x198>)
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <app_update+0x19c>)
 80018e8:	4a1c      	ldr	r2, [pc, #112]	@ (800195c <app_update+0x1a0>)
 80018ea:	213f      	movs	r1, #63	@ 0x3f
 80018ec:	f000 fe64 	bl	80025b8 <sniprintf>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001924 <app_update+0x168>)
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <app_update+0x160>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f83e 	bl	800197c <logger_log_print_>
 8001900:	b662      	cpsie	i
	for (index = 0; index < (sizeof(task_x_update_list)/sizeof(task_x_t)); index++)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3301      	adds	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d99c      	bls.n	8001848 <app_update+0x8c>
	}
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	20000120 	.word	0x20000120
 800191c:	080037a4 	.word	0x080037a4
 8001920:	08003574 	.word	0x08003574
 8001924:	20000168 	.word	0x20000168
 8001928:	080035c0 	.word	0x080035c0
 800192c:	08003584 	.word	0x08003584
 8001930:	080035a8 	.word	0x080035a8
 8001934:	080035b4 	.word	0x080035b4
 8001938:	080035cc 	.word	0x080035cc
 800193c:	080035e0 	.word	0x080035e0
 8001940:	40010800 	.word	0x40010800
 8001944:	e0001000 	.word	0xe0001000
 8001948:	20000024 	.word	0x20000024
 800194c:	20000000 	.word	0x20000000
 8001950:	431bde83 	.word	0x431bde83
 8001954:	08003610 	.word	0x08003610
 8001958:	080035e8 	.word	0x080035e8
 800195c:	080035f8 	.word	0x080035f8

08001960 <HAL_SYSTICK_Callback>:
 * function as an argument to call it, then it will be called a Callback
 * function.
 */

void HAL_SYSTICK_Callback(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
	g_tick_cnt++;
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <HAL_SYSTICK_Callback+0x18>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	4a03      	ldr	r2, [pc, #12]	@ (8001978 <HAL_SYSTICK_Callback+0x18>)
 800196c:	6013      	str	r3, [r2, #0]
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000124 	.word	0x20000124

0800197c <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	printf(msg);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 fe05 	bl	8002594 <iprintf>
	fflush(stdout);
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <logger_log_print_+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fd29 	bl	80023e8 <fflush>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000064 	.word	0x20000064

080019a4 <task_a_init>:
/********************** external data declaration *****************************/
uint32_t g_task_a_cnt;

/********************** external functions definition ************************/
void task_a_init(void *parameters)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a_init), p_task_a);
 80019ac:	b672      	cpsid	i
 80019ae:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <task_a_init+0x68>)
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <task_a_init+0x6c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4b16      	ldr	r3, [pc, #88]	@ (8001a14 <task_a_init+0x70>)
 80019ba:	4a17      	ldr	r2, [pc, #92]	@ (8001a18 <task_a_init+0x74>)
 80019bc:	213f      	movs	r1, #63	@ 0x3f
 80019be:	f000 fdfb 	bl	80025b8 <sniprintf>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a15      	ldr	r2, [pc, #84]	@ (8001a1c <task_a_init+0x78>)
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <task_a_init+0x68>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ffd5 	bl	800197c <logger_log_print_>
 80019d2:	b662      	cpsie	i

	g_task_a_cnt = G_TASK_A_CNT_INI;
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <task_a_init+0x7c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_a_cnt), (int)g_task_a_cnt);
 80019da:	b672      	cpsid	i
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <task_a_init+0x68>)
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <task_a_init+0x7c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <task_a_init+0x80>)
 80019e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a28 <task_a_init+0x84>)
 80019ea:	213f      	movs	r1, #63	@ 0x3f
 80019ec:	f000 fde4 	bl	80025b8 <sniprintf>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a1c <task_a_init+0x78>)
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <task_a_init+0x68>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ffbe 	bl	800197c <logger_log_print_>
 8001a00:	b662      	cpsie	i
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	080037a4 	.word	0x080037a4
 8001a10:	20000044 	.word	0x20000044
 8001a14:	08003640 	.word	0x08003640
 8001a18:	0800364c 	.word	0x0800364c
 8001a1c:	20000168 	.word	0x20000168
 8001a20:	2000016c 	.word	0x2000016c
 8001a24:	08003664 	.word	0x08003664
 8001a28:	08003674 	.word	0x08003674

08001a2c <task_a_update>:

void task_a_update(void *parameters)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	6078      	str	r0, [r7, #4]
	 * store data in a defined scope where they can be accessed and
	 * manipulated.
	 */
	#if (TEST_X == TEST_0)

	uint32_t task_a_cnt = TASK_A_CNT_INI;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
	/* Here Chatbot Artificial Intelligence generated code */

	#endif

	/* Update Task A Counter */
	g_task_a_cnt++;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <task_a_update+0x84>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab0 <task_a_update+0x84>)
 8001a40:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a_update), p_task_a);
 8001a42:	b672      	cpsid	i
 8001a44:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <task_a_update+0x88>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <task_a_update+0x8c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <task_a_update+0x90>)
 8001a50:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac0 <task_a_update+0x94>)
 8001a52:	213f      	movs	r1, #63	@ 0x3f
 8001a54:	f000 fdb0 	bl	80025b8 <sniprintf>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac4 <task_a_update+0x98>)
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <task_a_update+0x88>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff8a 	bl	800197c <logger_log_print_>
 8001a68:	b662      	cpsie	i

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_a_cnt), (int)g_task_a_cnt);
 8001a6a:	b672      	cpsid	i
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <task_a_update+0x88>)
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <task_a_update+0x84>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <task_a_update+0x9c>)
 8001a78:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <task_a_update+0xa0>)
 8001a7a:	213f      	movs	r1, #63	@ 0x3f
 8001a7c:	f000 fd9c 	bl	80025b8 <sniprintf>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4a10      	ldr	r2, [pc, #64]	@ (8001ac4 <task_a_update+0x98>)
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <task_a_update+0x88>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff76 	bl	800197c <logger_log_print_>
 8001a90:	b662      	cpsie	i
	 * The program waits until the called function or the operation
	 * returns.
	 * */
	#if (TEST_X == TEST_0)

	for (task_a_cnt = TASK_A_CNT_INI; task_a_cnt < TASK_A_CNT_MAX; task_a_cnt++);
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e002      	b.n	8001a9e <task_a_update+0x72>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad0 <task_a_update+0xa4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d9f8      	bls.n	8001a98 <task_a_update+0x6c>
	#if (TEST_X == TEST_2)

	/* Here Chatbot Artificial Intelligence generated code */

	#endif
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000016c 	.word	0x2000016c
 8001ab4:	080037a4 	.word	0x080037a4
 8001ab8:	20000044 	.word	0x20000044
 8001abc:	08003684 	.word	0x08003684
 8001ac0:	0800364c 	.word	0x0800364c
 8001ac4:	20000168 	.word	0x20000168
 8001ac8:	08003664 	.word	0x08003664
 8001acc:	08003674 	.word	0x08003674
 8001ad0:	0001869f 	.word	0x0001869f

08001ad4 <task_b_init>:
/********************** external data declaration *****************************/
uint32_t g_task_b_cnt;

/********************** external functions definition ************************/
void task_b_init(void *parameters)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b_init), p_task_b);
 8001adc:	b672      	cpsid	i
 8001ade:	4b17      	ldr	r3, [pc, #92]	@ (8001b3c <task_b_init+0x68>)
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <task_b_init+0x6c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <task_b_init+0x70>)
 8001aea:	4a17      	ldr	r2, [pc, #92]	@ (8001b48 <task_b_init+0x74>)
 8001aec:	213f      	movs	r1, #63	@ 0x3f
 8001aee:	f000 fd63 	bl	80025b8 <sniprintf>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a15      	ldr	r2, [pc, #84]	@ (8001b4c <task_b_init+0x78>)
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <task_b_init+0x68>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff3d 	bl	800197c <logger_log_print_>
 8001b02:	b662      	cpsie	i

	g_task_b_cnt = G_TASK_B_CNT_INI;
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <task_b_init+0x7c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_b_cnt), (int)g_task_b_cnt);
 8001b0a:	b672      	cpsid	i
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <task_b_init+0x68>)
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <task_b_init+0x7c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <task_b_init+0x80>)
 8001b18:	4a0f      	ldr	r2, [pc, #60]	@ (8001b58 <task_b_init+0x84>)
 8001b1a:	213f      	movs	r1, #63	@ 0x3f
 8001b1c:	f000 fd4c 	bl	80025b8 <sniprintf>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <task_b_init+0x78>)
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <task_b_init+0x68>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff26 	bl	800197c <logger_log_print_>
 8001b30:	b662      	cpsie	i
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	080037a4 	.word	0x080037a4
 8001b40:	20000048 	.word	0x20000048
 8001b44:	080036b0 	.word	0x080036b0
 8001b48:	080036bc 	.word	0x080036bc
 8001b4c:	20000168 	.word	0x20000168
 8001b50:	20000170 	.word	0x20000170
 8001b54:	080036d4 	.word	0x080036d4
 8001b58:	080036e4 	.word	0x080036e4

08001b5c <task_b_update>:

void task_b_update(void *parameters)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	6078      	str	r0, [r7, #4]
	/* Here Chatbot Artificial Intelligence generated code */

	#endif

	/* Update Task B Counter */
	g_task_b_cnt++;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <task_b_update+0x84>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001be0 <task_b_update+0x84>)
 8001b6c:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b_update), p_task_b);
 8001b6e:	b672      	cpsid	i
 8001b70:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <task_b_update+0x88>)
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	4b1c      	ldr	r3, [pc, #112]	@ (8001be8 <task_b_update+0x8c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bec <task_b_update+0x90>)
 8001b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf0 <task_b_update+0x94>)
 8001b7e:	213f      	movs	r1, #63	@ 0x3f
 8001b80:	f000 fd1a 	bl	80025b8 <sniprintf>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf4 <task_b_update+0x98>)
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <task_b_update+0x88>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fef4 	bl	800197c <logger_log_print_>
 8001b94:	b662      	cpsie	i

	/* Print out: Task Updated and execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_b_cnt), (int)g_task_b_cnt);
 8001b96:	b672      	cpsid	i
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <task_b_update+0x88>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <task_b_update+0x84>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <task_b_update+0x9c>)
 8001ba4:	4a15      	ldr	r2, [pc, #84]	@ (8001bfc <task_b_update+0xa0>)
 8001ba6:	213f      	movs	r1, #63	@ 0x3f
 8001ba8:	f000 fd06 	bl	80025b8 <sniprintf>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4a11      	ldr	r2, [pc, #68]	@ (8001bf4 <task_b_update+0x98>)
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <task_b_update+0x88>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fee0 	bl	800197c <logger_log_print_>
 8001bbc:	b662      	cpsie	i
	 * The program calls the function and move to the next operation and does
	 * not wait for it to return.
	 */
	#if (TEST_X == TEST_0)

	if (task_b_cnt < TASK_B_CNT_MAX)
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <task_b_update+0xa4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b31      	cmp	r3, #49	@ 0x31
 8001bc4:	d805      	bhi.n	8001bd2 <task_b_update+0x76>
		task_b_cnt++;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <task_b_update+0xa4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c00 <task_b_update+0xa4>)
 8001bce:	6013      	str	r3, [r2, #0]
	#if (TEST_X == TEST_2)

	/* Here Chatbot Artificial Intelligence generated code */

	#endif
}
 8001bd0:	e002      	b.n	8001bd8 <task_b_update+0x7c>
		task_b_cnt = TASK_B_CNT_INI;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <task_b_update+0xa4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000170 	.word	0x20000170
 8001be4:	080037a4 	.word	0x080037a4
 8001be8:	20000048 	.word	0x20000048
 8001bec:	080036f4 	.word	0x080036f4
 8001bf0:	080036bc 	.word	0x080036bc
 8001bf4:	20000168 	.word	0x20000168
 8001bf8:	080036d4 	.word	0x080036d4
 8001bfc:	080036e4 	.word	0x080036e4
 8001c00:	20000174 	.word	0x20000174

08001c04 <task_c_init>:
/********************** external data declaration *****************************/
uint32_t g_task_c_cnt;

/********************** external functions definition ************************/
void task_c_init(void *parameters)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_c_init), p_task_c);
 8001c0c:	b672      	cpsid	i
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <task_c_init+0x6c>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <task_c_init+0x70>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <task_c_init+0x74>)
 8001c1a:	4a18      	ldr	r2, [pc, #96]	@ (8001c7c <task_c_init+0x78>)
 8001c1c:	213f      	movs	r1, #63	@ 0x3f
 8001c1e:	f000 fccb 	bl	80025b8 <sniprintf>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4a16      	ldr	r2, [pc, #88]	@ (8001c80 <task_c_init+0x7c>)
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <task_c_init+0x6c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fea5 	bl	800197c <logger_log_print_>
 8001c32:	b662      	cpsie	i

	g_task_c_cnt = G_TASK_C_CNT_INI;
 8001c34:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <task_c_init+0x80>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
	g_tick_cnt = G_TICK_CNT_INI;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <task_c_init+0x84>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_c_cnt), (int)g_task_c_cnt);
 8001c40:	b672      	cpsid	i
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <task_c_init+0x6c>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <task_c_init+0x80>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <task_c_init+0x88>)
 8001c4e:	4a10      	ldr	r2, [pc, #64]	@ (8001c90 <task_c_init+0x8c>)
 8001c50:	213f      	movs	r1, #63	@ 0x3f
 8001c52:	f000 fcb1 	bl	80025b8 <sniprintf>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a09      	ldr	r2, [pc, #36]	@ (8001c80 <task_c_init+0x7c>)
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <task_c_init+0x6c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fe8b 	bl	800197c <logger_log_print_>
 8001c66:	b662      	cpsie	i
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	080037a4 	.word	0x080037a4
 8001c74:	2000004c 	.word	0x2000004c
 8001c78:	08003724 	.word	0x08003724
 8001c7c:	08003730 	.word	0x08003730
 8001c80:	20000168 	.word	0x20000168
 8001c84:	20000178 	.word	0x20000178
 8001c88:	20000124 	.word	0x20000124
 8001c8c:	08003748 	.word	0x08003748
 8001c90:	08003758 	.word	0x08003758

08001c94 <task_c_update>:

void task_c_update(void *parameters)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	6078      	str	r0, [r7, #4]
	bool b_time_update_required = false;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]

	/* Update Task C Counter */
	g_task_c_cnt++;
 8001ca0:	4b29      	ldr	r3, [pc, #164]	@ (8001d48 <task_c_update+0xb4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a28      	ldr	r2, [pc, #160]	@ (8001d48 <task_c_update+0xb4>)
 8001ca8:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_c_update), p_task_c);
 8001caa:	b672      	cpsid	i
 8001cac:	4b27      	ldr	r3, [pc, #156]	@ (8001d4c <task_c_update+0xb8>)
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <task_c_update+0xbc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <task_c_update+0xc0>)
 8001cb8:	4a27      	ldr	r2, [pc, #156]	@ (8001d58 <task_c_update+0xc4>)
 8001cba:	213f      	movs	r1, #63	@ 0x3f
 8001cbc:	f000 fc7c 	bl	80025b8 <sniprintf>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4a26      	ldr	r2, [pc, #152]	@ (8001d5c <task_c_update+0xc8>)
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <task_c_update+0xb8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fe56 	bl	800197c <logger_log_print_>
 8001cd0:	b662      	cpsie	i

	/* Print out: Task Updated and execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_c_cnt), (int)g_task_c_cnt);
 8001cd2:	b672      	cpsid	i
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <task_c_update+0xb8>)
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <task_c_update+0xb4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4b20      	ldr	r3, [pc, #128]	@ (8001d60 <task_c_update+0xcc>)
 8001ce0:	4a20      	ldr	r2, [pc, #128]	@ (8001d64 <task_c_update+0xd0>)
 8001ce2:	213f      	movs	r1, #63	@ 0x3f
 8001ce4:	f000 fc68 	bl	80025b8 <sniprintf>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a1c      	ldr	r2, [pc, #112]	@ (8001d5c <task_c_update+0xc8>)
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <task_c_update+0xb8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fe42 	bl	800197c <logger_log_print_>
 8001cf8:	b662      	cpsie	i

	/* Protect shared resource (g_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8001cfa:	b672      	cpsid	i
    if (0 < g_tick_cnt)
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <task_c_update+0xd4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <task_c_update+0x7e>
    {
    	g_tick_cnt--;
 8001d04:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <task_c_update+0xd4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <task_c_update+0xd4>)
 8001d0c:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8001d12:	b662      	cpsie	i

    while (b_time_update_required)
 8001d14:	e00f      	b.n	8001d36 <task_c_update+0xa2>
    	 * For example, update Software Timers
    	 *
    	 */

		/* Protect shared resource (tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8001d16:	b672      	cpsid	i
		if (0 < g_tick_cnt)
 8001d18:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <task_c_update+0xd4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <task_c_update+0x9c>
		{
			g_tick_cnt--;
 8001d20:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <task_c_update+0xd4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	4a10      	ldr	r2, [pc, #64]	@ (8001d68 <task_c_update+0xd4>)
 8001d28:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e001      	b.n	8001d34 <task_c_update+0xa0>
		}
		else
		{
			b_time_update_required = false;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8001d34:	b662      	cpsie	i
    while (b_time_update_required)
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ec      	bne.n	8001d16 <task_c_update+0x82>
	}
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000178 	.word	0x20000178
 8001d4c:	080037a4 	.word	0x080037a4
 8001d50:	2000004c 	.word	0x2000004c
 8001d54:	08003768 	.word	0x08003768
 8001d58:	08003730 	.word	0x08003730
 8001d5c:	20000168 	.word	0x20000168
 8001d60:	08003748 	.word	0x08003748
 8001d64:	08003758 	.word	0x08003758
 8001d68:	20000124 	.word	0x20000124

08001d6c <findslot>:
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <findslot+0x2c>)
 8001d6e:	b510      	push	{r4, lr}
 8001d70:	4604      	mov	r4, r0
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	b118      	cbz	r0, 8001d7e <findslot+0x12>
 8001d76:	6a03      	ldr	r3, [r0, #32]
 8001d78:	b90b      	cbnz	r3, 8001d7e <findslot+0x12>
 8001d7a:	f000 fbd5 	bl	8002528 <__sinit>
 8001d7e:	2c13      	cmp	r4, #19
 8001d80:	d807      	bhi.n	8001d92 <findslot+0x26>
 8001d82:	4806      	ldr	r0, [pc, #24]	@ (8001d9c <findslot+0x30>)
 8001d84:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001d88:	3201      	adds	r2, #1
 8001d8a:	d002      	beq.n	8001d92 <findslot+0x26>
 8001d8c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001d90:	bd10      	pop	{r4, pc}
 8001d92:	2000      	movs	r0, #0
 8001d94:	e7fc      	b.n	8001d90 <findslot+0x24>
 8001d96:	bf00      	nop
 8001d98:	20000064 	.word	0x20000064
 8001d9c:	20000188 	.word	0x20000188

08001da0 <error>:
 8001da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da2:	4604      	mov	r4, r0
 8001da4:	f000 fcce 	bl	8002744 <__errno>
 8001da8:	2613      	movs	r6, #19
 8001daa:	4605      	mov	r5, r0
 8001dac:	2700      	movs	r7, #0
 8001dae:	4630      	mov	r0, r6
 8001db0:	4639      	mov	r1, r7
 8001db2:	beab      	bkpt	0x00ab
 8001db4:	4606      	mov	r6, r0
 8001db6:	4620      	mov	r0, r4
 8001db8:	602e      	str	r6, [r5, #0]
 8001dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001dbc <checkerror>:
 8001dbc:	1c43      	adds	r3, r0, #1
 8001dbe:	d101      	bne.n	8001dc4 <checkerror+0x8>
 8001dc0:	f7ff bfee 	b.w	8001da0 <error>
 8001dc4:	4770      	bx	lr

08001dc6 <_swiread>:
 8001dc6:	b530      	push	{r4, r5, lr}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	2406      	movs	r4, #6
 8001dcc:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001dd0:	9203      	str	r2, [sp, #12]
 8001dd2:	ad01      	add	r5, sp, #4
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	beab      	bkpt	0x00ab
 8001dda:	4604      	mov	r4, r0
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7ff ffed 	bl	8001dbc <checkerror>
 8001de2:	b005      	add	sp, #20
 8001de4:	bd30      	pop	{r4, r5, pc}

08001de6 <_read>:
 8001de6:	b570      	push	{r4, r5, r6, lr}
 8001de8:	460e      	mov	r6, r1
 8001dea:	4614      	mov	r4, r2
 8001dec:	f7ff ffbe 	bl	8001d6c <findslot>
 8001df0:	4605      	mov	r5, r0
 8001df2:	b930      	cbnz	r0, 8001e02 <_read+0x1c>
 8001df4:	f000 fca6 	bl	8002744 <__errno>
 8001df8:	2309      	movs	r3, #9
 8001dfa:	6003      	str	r3, [r0, #0]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	bd70      	pop	{r4, r5, r6, pc}
 8001e02:	4622      	mov	r2, r4
 8001e04:	4631      	mov	r1, r6
 8001e06:	6800      	ldr	r0, [r0, #0]
 8001e08:	f7ff ffdd 	bl	8001dc6 <_swiread>
 8001e0c:	1c43      	adds	r3, r0, #1
 8001e0e:	d0f5      	beq.n	8001dfc <_read+0x16>
 8001e10:	686b      	ldr	r3, [r5, #4]
 8001e12:	1a20      	subs	r0, r4, r0
 8001e14:	4403      	add	r3, r0
 8001e16:	606b      	str	r3, [r5, #4]
 8001e18:	e7f2      	b.n	8001e00 <_read+0x1a>

08001e1a <_swilseek>:
 8001e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	4616      	mov	r6, r2
 8001e20:	f7ff ffa4 	bl	8001d6c <findslot>
 8001e24:	4605      	mov	r5, r0
 8001e26:	b940      	cbnz	r0, 8001e3a <_swilseek+0x20>
 8001e28:	f000 fc8c 	bl	8002744 <__errno>
 8001e2c:	2309      	movs	r3, #9
 8001e2e:	6003      	str	r3, [r0, #0]
 8001e30:	f04f 34ff 	mov.w	r4, #4294967295
 8001e34:	4620      	mov	r0, r4
 8001e36:	b003      	add	sp, #12
 8001e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3a:	2e02      	cmp	r6, #2
 8001e3c:	d903      	bls.n	8001e46 <_swilseek+0x2c>
 8001e3e:	f000 fc81 	bl	8002744 <__errno>
 8001e42:	2316      	movs	r3, #22
 8001e44:	e7f3      	b.n	8001e2e <_swilseek+0x14>
 8001e46:	2e01      	cmp	r6, #1
 8001e48:	d112      	bne.n	8001e70 <_swilseek+0x56>
 8001e4a:	6843      	ldr	r3, [r0, #4]
 8001e4c:	18e4      	adds	r4, r4, r3
 8001e4e:	d4f6      	bmi.n	8001e3e <_swilseek+0x24>
 8001e50:	682b      	ldr	r3, [r5, #0]
 8001e52:	260a      	movs	r6, #10
 8001e54:	466f      	mov	r7, sp
 8001e56:	e9cd 3400 	strd	r3, r4, [sp]
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	4639      	mov	r1, r7
 8001e5e:	beab      	bkpt	0x00ab
 8001e60:	4606      	mov	r6, r0
 8001e62:	4630      	mov	r0, r6
 8001e64:	f7ff ffaa 	bl	8001dbc <checkerror>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	dbe1      	blt.n	8001e30 <_swilseek+0x16>
 8001e6c:	606c      	str	r4, [r5, #4]
 8001e6e:	e7e1      	b.n	8001e34 <_swilseek+0x1a>
 8001e70:	2e02      	cmp	r6, #2
 8001e72:	6803      	ldr	r3, [r0, #0]
 8001e74:	d1ec      	bne.n	8001e50 <_swilseek+0x36>
 8001e76:	260c      	movs	r6, #12
 8001e78:	466f      	mov	r7, sp
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	4630      	mov	r0, r6
 8001e7e:	4639      	mov	r1, r7
 8001e80:	beab      	bkpt	0x00ab
 8001e82:	4606      	mov	r6, r0
 8001e84:	4630      	mov	r0, r6
 8001e86:	f7ff ff99 	bl	8001dbc <checkerror>
 8001e8a:	1c43      	adds	r3, r0, #1
 8001e8c:	d0d0      	beq.n	8001e30 <_swilseek+0x16>
 8001e8e:	4404      	add	r4, r0
 8001e90:	e7de      	b.n	8001e50 <_swilseek+0x36>

08001e92 <_lseek>:
 8001e92:	f7ff bfc2 	b.w	8001e1a <_swilseek>

08001e96 <_swiwrite>:
 8001e96:	b530      	push	{r4, r5, lr}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	2405      	movs	r4, #5
 8001e9c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001ea0:	9203      	str	r2, [sp, #12]
 8001ea2:	ad01      	add	r5, sp, #4
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	beab      	bkpt	0x00ab
 8001eaa:	4604      	mov	r4, r0
 8001eac:	4620      	mov	r0, r4
 8001eae:	f7ff ff85 	bl	8001dbc <checkerror>
 8001eb2:	b005      	add	sp, #20
 8001eb4:	bd30      	pop	{r4, r5, pc}

08001eb6 <_write>:
 8001eb6:	b570      	push	{r4, r5, r6, lr}
 8001eb8:	460e      	mov	r6, r1
 8001eba:	4615      	mov	r5, r2
 8001ebc:	f7ff ff56 	bl	8001d6c <findslot>
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	b930      	cbnz	r0, 8001ed2 <_write+0x1c>
 8001ec4:	f000 fc3e 	bl	8002744 <__errno>
 8001ec8:	2309      	movs	r3, #9
 8001eca:	6003      	str	r3, [r0, #0]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	bd70      	pop	{r4, r5, r6, pc}
 8001ed2:	462a      	mov	r2, r5
 8001ed4:	4631      	mov	r1, r6
 8001ed6:	6800      	ldr	r0, [r0, #0]
 8001ed8:	f7ff ffdd 	bl	8001e96 <_swiwrite>
 8001edc:	1e03      	subs	r3, r0, #0
 8001ede:	dbf5      	blt.n	8001ecc <_write+0x16>
 8001ee0:	6862      	ldr	r2, [r4, #4]
 8001ee2:	1ae8      	subs	r0, r5, r3
 8001ee4:	4402      	add	r2, r0
 8001ee6:	42ab      	cmp	r3, r5
 8001ee8:	6062      	str	r2, [r4, #4]
 8001eea:	d1f1      	bne.n	8001ed0 <_write+0x1a>
 8001eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff bf55 	b.w	8001da0 <error>

08001ef6 <_swiclose>:
 8001ef6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ef8:	2402      	movs	r4, #2
 8001efa:	9001      	str	r0, [sp, #4]
 8001efc:	ad01      	add	r5, sp, #4
 8001efe:	4620      	mov	r0, r4
 8001f00:	4629      	mov	r1, r5
 8001f02:	beab      	bkpt	0x00ab
 8001f04:	4604      	mov	r4, r0
 8001f06:	4620      	mov	r0, r4
 8001f08:	f7ff ff58 	bl	8001dbc <checkerror>
 8001f0c:	b003      	add	sp, #12
 8001f0e:	bd30      	pop	{r4, r5, pc}

08001f10 <_close>:
 8001f10:	b538      	push	{r3, r4, r5, lr}
 8001f12:	4605      	mov	r5, r0
 8001f14:	f7ff ff2a 	bl	8001d6c <findslot>
 8001f18:	4604      	mov	r4, r0
 8001f1a:	b930      	cbnz	r0, 8001f2a <_close+0x1a>
 8001f1c:	f000 fc12 	bl	8002744 <__errno>
 8001f20:	2309      	movs	r3, #9
 8001f22:	6003      	str	r3, [r0, #0]
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	bd38      	pop	{r3, r4, r5, pc}
 8001f2a:	3d01      	subs	r5, #1
 8001f2c:	2d01      	cmp	r5, #1
 8001f2e:	d809      	bhi.n	8001f44 <_close+0x34>
 8001f30:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <_close+0x40>)
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d104      	bne.n	8001f44 <_close+0x34>
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	2000      	movs	r0, #0
 8001f40:	6023      	str	r3, [r4, #0]
 8001f42:	e7f1      	b.n	8001f28 <_close+0x18>
 8001f44:	6820      	ldr	r0, [r4, #0]
 8001f46:	f7ff ffd6 	bl	8001ef6 <_swiclose>
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	d0f5      	beq.n	8001f3a <_close+0x2a>
 8001f4e:	e7eb      	b.n	8001f28 <_close+0x18>
 8001f50:	20000188 	.word	0x20000188

08001f54 <_swistat>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	460c      	mov	r4, r1
 8001f58:	f7ff ff08 	bl	8001d6c <findslot>
 8001f5c:	4605      	mov	r5, r0
 8001f5e:	b930      	cbnz	r0, 8001f6e <_swistat+0x1a>
 8001f60:	f000 fbf0 	bl	8002744 <__errno>
 8001f64:	2309      	movs	r3, #9
 8001f66:	6003      	str	r3, [r0, #0]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
 8001f6e:	6863      	ldr	r3, [r4, #4]
 8001f70:	260c      	movs	r6, #12
 8001f72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f76:	6063      	str	r3, [r4, #4]
 8001f78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f7c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001f7e:	4630      	mov	r0, r6
 8001f80:	4629      	mov	r1, r5
 8001f82:	beab      	bkpt	0x00ab
 8001f84:	4605      	mov	r5, r0
 8001f86:	4628      	mov	r0, r5
 8001f88:	f7ff ff18 	bl	8001dbc <checkerror>
 8001f8c:	1c43      	adds	r3, r0, #1
 8001f8e:	d0eb      	beq.n	8001f68 <_swistat+0x14>
 8001f90:	6120      	str	r0, [r4, #16]
 8001f92:	2000      	movs	r0, #0
 8001f94:	e7ea      	b.n	8001f6c <_swistat+0x18>

08001f96 <_fstat>:
 8001f96:	460b      	mov	r3, r1
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	2258      	movs	r2, #88	@ 0x58
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fb80 	bl	80026a6 <memset>
 8001fa6:	4601      	mov	r1, r0
 8001fa8:	4620      	mov	r0, r4
 8001faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fae:	f7ff bfd1 	b.w	8001f54 <_swistat>

08001fb2 <_stat>:
 8001fb2:	b538      	push	{r3, r4, r5, lr}
 8001fb4:	460d      	mov	r5, r1
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	2258      	movs	r2, #88	@ 0x58
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f000 fb72 	bl	80026a6 <memset>
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f000 f811 	bl	8001fec <_swiopen>
 8001fca:	1c43      	adds	r3, r0, #1
 8001fcc:	4604      	mov	r4, r0
 8001fce:	d00b      	beq.n	8001fe8 <_stat+0x36>
 8001fd0:	686b      	ldr	r3, [r5, #4]
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8001fd8:	606b      	str	r3, [r5, #4]
 8001fda:	f7ff ffbb 	bl	8001f54 <_swistat>
 8001fde:	4605      	mov	r5, r0
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f7ff ff95 	bl	8001f10 <_close>
 8001fe6:	462c      	mov	r4, r5
 8001fe8:	4620      	mov	r0, r4
 8001fea:	bd38      	pop	{r3, r4, r5, pc}

08001fec <_swiopen>:
 8001fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ff0:	4682      	mov	sl, r0
 8001ff2:	460e      	mov	r6, r1
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	4f28      	ldr	r7, [pc, #160]	@ (8002098 <_swiopen+0xac>)
 8001ff8:	b096      	sub	sp, #88	@ 0x58
 8001ffa:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8001ffe:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002002:	3301      	adds	r3, #1
 8002004:	d00c      	beq.n	8002020 <_swiopen+0x34>
 8002006:	3401      	adds	r4, #1
 8002008:	2c14      	cmp	r4, #20
 800200a:	d1f6      	bne.n	8001ffa <_swiopen+0xe>
 800200c:	f000 fb9a 	bl	8002744 <__errno>
 8002010:	2318      	movs	r3, #24
 8002012:	f04f 34ff 	mov.w	r4, #4294967295
 8002016:	6003      	str	r3, [r0, #0]
 8002018:	4620      	mov	r0, r4
 800201a:	b016      	add	sp, #88	@ 0x58
 800201c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002020:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002024:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002028:	46e9      	mov	r9, sp
 800202a:	d109      	bne.n	8002040 <_swiopen+0x54>
 800202c:	4649      	mov	r1, r9
 800202e:	4650      	mov	r0, sl
 8002030:	f7ff ffbf 	bl	8001fb2 <_stat>
 8002034:	3001      	adds	r0, #1
 8002036:	d003      	beq.n	8002040 <_swiopen+0x54>
 8002038:	f000 fb84 	bl	8002744 <__errno>
 800203c:	2311      	movs	r3, #17
 800203e:	e7e8      	b.n	8002012 <_swiopen+0x26>
 8002040:	f240 6301 	movw	r3, #1537	@ 0x601
 8002044:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002048:	07b2      	lsls	r2, r6, #30
 800204a:	bf48      	it	mi
 800204c:	f045 0502 	orrmi.w	r5, r5, #2
 8002050:	421e      	tst	r6, r3
 8002052:	bf18      	it	ne
 8002054:	f045 0504 	orrne.w	r5, r5, #4
 8002058:	0733      	lsls	r3, r6, #28
 800205a:	bf48      	it	mi
 800205c:	f025 0504 	bicmi.w	r5, r5, #4
 8002060:	4650      	mov	r0, sl
 8002062:	bf48      	it	mi
 8002064:	f045 0508 	orrmi.w	r5, r5, #8
 8002068:	f8cd a000 	str.w	sl, [sp]
 800206c:	f7fe f86e 	bl	800014c <strlen>
 8002070:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002074:	2501      	movs	r5, #1
 8002076:	4628      	mov	r0, r5
 8002078:	4649      	mov	r1, r9
 800207a:	beab      	bkpt	0x00ab
 800207c:	4605      	mov	r5, r0
 800207e:	2d00      	cmp	r5, #0
 8002080:	db05      	blt.n	800208e <_swiopen+0xa2>
 8002082:	2300      	movs	r3, #0
 8002084:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002088:	4447      	add	r7, r8
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	e7c4      	b.n	8002018 <_swiopen+0x2c>
 800208e:	4628      	mov	r0, r5
 8002090:	f7ff fe86 	bl	8001da0 <error>
 8002094:	4604      	mov	r4, r0
 8002096:	e7bf      	b.n	8002018 <_swiopen+0x2c>
 8002098:	20000188 	.word	0x20000188

0800209c <_get_semihosting_exts>:
 800209c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80020a0:	4606      	mov	r6, r0
 80020a2:	460f      	mov	r7, r1
 80020a4:	4829      	ldr	r0, [pc, #164]	@ (800214c <_get_semihosting_exts+0xb0>)
 80020a6:	2100      	movs	r1, #0
 80020a8:	4615      	mov	r5, r2
 80020aa:	f7ff ff9f 	bl	8001fec <_swiopen>
 80020ae:	4604      	mov	r4, r0
 80020b0:	462a      	mov	r2, r5
 80020b2:	2100      	movs	r1, #0
 80020b4:	4630      	mov	r0, r6
 80020b6:	f000 faf6 	bl	80026a6 <memset>
 80020ba:	1c63      	adds	r3, r4, #1
 80020bc:	d014      	beq.n	80020e8 <_get_semihosting_exts+0x4c>
 80020be:	4620      	mov	r0, r4
 80020c0:	f7ff fe54 	bl	8001d6c <findslot>
 80020c4:	f04f 080c 	mov.w	r8, #12
 80020c8:	4681      	mov	r9, r0
 80020ca:	4640      	mov	r0, r8
 80020cc:	4649      	mov	r1, r9
 80020ce:	beab      	bkpt	0x00ab
 80020d0:	4680      	mov	r8, r0
 80020d2:	4640      	mov	r0, r8
 80020d4:	f7ff fe72 	bl	8001dbc <checkerror>
 80020d8:	2803      	cmp	r0, #3
 80020da:	dd02      	ble.n	80020e2 <_get_semihosting_exts+0x46>
 80020dc:	1ec3      	subs	r3, r0, #3
 80020de:	42ab      	cmp	r3, r5
 80020e0:	dc07      	bgt.n	80020f2 <_get_semihosting_exts+0x56>
 80020e2:	4620      	mov	r0, r4
 80020e4:	f7ff ff14 	bl	8001f10 <_close>
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	b003      	add	sp, #12
 80020ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020f2:	2204      	movs	r2, #4
 80020f4:	4620      	mov	r0, r4
 80020f6:	eb0d 0102 	add.w	r1, sp, r2
 80020fa:	f7ff fe74 	bl	8001de6 <_read>
 80020fe:	2803      	cmp	r0, #3
 8002100:	ddef      	ble.n	80020e2 <_get_semihosting_exts+0x46>
 8002102:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002106:	2b53      	cmp	r3, #83	@ 0x53
 8002108:	d1eb      	bne.n	80020e2 <_get_semihosting_exts+0x46>
 800210a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800210e:	2b48      	cmp	r3, #72	@ 0x48
 8002110:	d1e7      	bne.n	80020e2 <_get_semihosting_exts+0x46>
 8002112:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002116:	2b46      	cmp	r3, #70	@ 0x46
 8002118:	d1e3      	bne.n	80020e2 <_get_semihosting_exts+0x46>
 800211a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800211e:	2b42      	cmp	r3, #66	@ 0x42
 8002120:	d1df      	bne.n	80020e2 <_get_semihosting_exts+0x46>
 8002122:	2201      	movs	r2, #1
 8002124:	4639      	mov	r1, r7
 8002126:	4620      	mov	r0, r4
 8002128:	f7ff fe77 	bl	8001e1a <_swilseek>
 800212c:	2800      	cmp	r0, #0
 800212e:	dbd8      	blt.n	80020e2 <_get_semihosting_exts+0x46>
 8002130:	462a      	mov	r2, r5
 8002132:	4631      	mov	r1, r6
 8002134:	4620      	mov	r0, r4
 8002136:	f7ff fe56 	bl	8001de6 <_read>
 800213a:	4605      	mov	r5, r0
 800213c:	4620      	mov	r0, r4
 800213e:	f7ff fee7 	bl	8001f10 <_close>
 8002142:	4628      	mov	r0, r5
 8002144:	f7ff fe3a 	bl	8001dbc <checkerror>
 8002148:	e7d0      	b.n	80020ec <_get_semihosting_exts+0x50>
 800214a:	bf00      	nop
 800214c:	080037a8 	.word	0x080037a8

08002150 <initialise_semihosting_exts>:
 8002150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002152:	2100      	movs	r1, #0
 8002154:	2201      	movs	r2, #1
 8002156:	4d09      	ldr	r5, [pc, #36]	@ (800217c <initialise_semihosting_exts+0x2c>)
 8002158:	4c09      	ldr	r4, [pc, #36]	@ (8002180 <initialise_semihosting_exts+0x30>)
 800215a:	a801      	add	r0, sp, #4
 800215c:	6029      	str	r1, [r5, #0]
 800215e:	6022      	str	r2, [r4, #0]
 8002160:	f7ff ff9c 	bl	800209c <_get_semihosting_exts>
 8002164:	2800      	cmp	r0, #0
 8002166:	dd07      	ble.n	8002178 <initialise_semihosting_exts+0x28>
 8002168:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800216c:	f003 0201 	and.w	r2, r3, #1
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	602a      	str	r2, [r5, #0]
 8002176:	6023      	str	r3, [r4, #0]
 8002178:	b003      	add	sp, #12
 800217a:	bd30      	pop	{r4, r5, pc}
 800217c:	20000054 	.word	0x20000054
 8002180:	20000050 	.word	0x20000050

08002184 <_has_ext_stdout_stderr>:
 8002184:	b510      	push	{r4, lr}
 8002186:	4c04      	ldr	r4, [pc, #16]	@ (8002198 <_has_ext_stdout_stderr+0x14>)
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	da01      	bge.n	8002192 <_has_ext_stdout_stderr+0xe>
 800218e:	f7ff ffdf 	bl	8002150 <initialise_semihosting_exts>
 8002192:	6820      	ldr	r0, [r4, #0]
 8002194:	bd10      	pop	{r4, pc}
 8002196:	bf00      	nop
 8002198:	20000050 	.word	0x20000050

0800219c <initialise_monitor_handles>:
 800219c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a0:	2303      	movs	r3, #3
 80021a2:	2400      	movs	r4, #0
 80021a4:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8002248 <initialise_monitor_handles+0xac>
 80021a8:	b085      	sub	sp, #20
 80021aa:	f8cd 9004 	str.w	r9, [sp, #4]
 80021ae:	af01      	add	r7, sp, #4
 80021b0:	9303      	str	r3, [sp, #12]
 80021b2:	2501      	movs	r5, #1
 80021b4:	9402      	str	r4, [sp, #8]
 80021b6:	4628      	mov	r0, r5
 80021b8:	4639      	mov	r1, r7
 80021ba:	beab      	bkpt	0x00ab
 80021bc:	4605      	mov	r5, r0
 80021be:	f04f 32ff 	mov.w	r2, #4294967295
 80021c2:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800224c <initialise_monitor_handles+0xb0>
 80021c6:	4623      	mov	r3, r4
 80021c8:	4c21      	ldr	r4, [pc, #132]	@ (8002250 <initialise_monitor_handles+0xb4>)
 80021ca:	f8c8 5000 	str.w	r5, [r8]
 80021ce:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80021d2:	3301      	adds	r3, #1
 80021d4:	2b14      	cmp	r3, #20
 80021d6:	d1fa      	bne.n	80021ce <initialise_monitor_handles+0x32>
 80021d8:	f7ff ffd4 	bl	8002184 <_has_ext_stdout_stderr>
 80021dc:	4d1d      	ldr	r5, [pc, #116]	@ (8002254 <initialise_monitor_handles+0xb8>)
 80021de:	b1d0      	cbz	r0, 8002216 <initialise_monitor_handles+0x7a>
 80021e0:	f04f 0a03 	mov.w	sl, #3
 80021e4:	2304      	movs	r3, #4
 80021e6:	f8cd 9004 	str.w	r9, [sp, #4]
 80021ea:	2601      	movs	r6, #1
 80021ec:	f8cd a00c 	str.w	sl, [sp, #12]
 80021f0:	9302      	str	r3, [sp, #8]
 80021f2:	4630      	mov	r0, r6
 80021f4:	4639      	mov	r1, r7
 80021f6:	beab      	bkpt	0x00ab
 80021f8:	4683      	mov	fp, r0
 80021fa:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <initialise_monitor_handles+0xbc>)
 80021fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8002200:	f8c3 b000 	str.w	fp, [r3]
 8002204:	2308      	movs	r3, #8
 8002206:	f8cd a00c 	str.w	sl, [sp, #12]
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	4630      	mov	r0, r6
 800220e:	4639      	mov	r1, r7
 8002210:	beab      	bkpt	0x00ab
 8002212:	4606      	mov	r6, r0
 8002214:	602e      	str	r6, [r5, #0]
 8002216:	2600      	movs	r6, #0
 8002218:	682b      	ldr	r3, [r5, #0]
 800221a:	6066      	str	r6, [r4, #4]
 800221c:	3301      	adds	r3, #1
 800221e:	bf02      	ittt	eq
 8002220:	4b0d      	ldreq	r3, [pc, #52]	@ (8002258 <initialise_monitor_handles+0xbc>)
 8002222:	681b      	ldreq	r3, [r3, #0]
 8002224:	602b      	streq	r3, [r5, #0]
 8002226:	f8d8 3000 	ldr.w	r3, [r8]
 800222a:	6023      	str	r3, [r4, #0]
 800222c:	f7ff ffaa 	bl	8002184 <_has_ext_stdout_stderr>
 8002230:	b130      	cbz	r0, 8002240 <initialise_monitor_handles+0xa4>
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <initialise_monitor_handles+0xbc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800223a:	682b      	ldr	r3, [r5, #0]
 800223c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002240:	b005      	add	sp, #20
 8002242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002246:	bf00      	nop
 8002248:	080037be 	.word	0x080037be
 800224c:	20000184 	.word	0x20000184
 8002250:	20000188 	.word	0x20000188
 8002254:	2000017c 	.word	0x2000017c
 8002258:	20000180 	.word	0x20000180

0800225c <_isatty>:
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	f7ff fd85 	bl	8001d6c <findslot>
 8002262:	2409      	movs	r4, #9
 8002264:	4605      	mov	r5, r0
 8002266:	b920      	cbnz	r0, 8002272 <_isatty+0x16>
 8002268:	f000 fa6c 	bl	8002744 <__errno>
 800226c:	6004      	str	r4, [r0, #0]
 800226e:	2000      	movs	r0, #0
 8002270:	bd70      	pop	{r4, r5, r6, pc}
 8002272:	4620      	mov	r0, r4
 8002274:	4629      	mov	r1, r5
 8002276:	beab      	bkpt	0x00ab
 8002278:	4604      	mov	r4, r0
 800227a:	2c01      	cmp	r4, #1
 800227c:	4620      	mov	r0, r4
 800227e:	d0f7      	beq.n	8002270 <_isatty+0x14>
 8002280:	f000 fa60 	bl	8002744 <__errno>
 8002284:	2513      	movs	r5, #19
 8002286:	4604      	mov	r4, r0
 8002288:	2600      	movs	r6, #0
 800228a:	4628      	mov	r0, r5
 800228c:	4631      	mov	r1, r6
 800228e:	beab      	bkpt	0x00ab
 8002290:	4605      	mov	r5, r0
 8002292:	6025      	str	r5, [r4, #0]
 8002294:	e7eb      	b.n	800226e <_isatty+0x12>
	...

08002298 <__sflush_r>:
 8002298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	0716      	lsls	r6, r2, #28
 80022a0:	4605      	mov	r5, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	d454      	bmi.n	8002350 <__sflush_r+0xb8>
 80022a6:	684b      	ldr	r3, [r1, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	dc02      	bgt.n	80022b2 <__sflush_r+0x1a>
 80022ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	dd48      	ble.n	8002344 <__sflush_r+0xac>
 80022b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022b4:	2e00      	cmp	r6, #0
 80022b6:	d045      	beq.n	8002344 <__sflush_r+0xac>
 80022b8:	2300      	movs	r3, #0
 80022ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80022be:	682f      	ldr	r7, [r5, #0]
 80022c0:	6a21      	ldr	r1, [r4, #32]
 80022c2:	602b      	str	r3, [r5, #0]
 80022c4:	d030      	beq.n	8002328 <__sflush_r+0x90>
 80022c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80022c8:	89a3      	ldrh	r3, [r4, #12]
 80022ca:	0759      	lsls	r1, r3, #29
 80022cc:	d505      	bpl.n	80022da <__sflush_r+0x42>
 80022ce:	6863      	ldr	r3, [r4, #4]
 80022d0:	1ad2      	subs	r2, r2, r3
 80022d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80022d4:	b10b      	cbz	r3, 80022da <__sflush_r+0x42>
 80022d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022d8:	1ad2      	subs	r2, r2, r3
 80022da:	2300      	movs	r3, #0
 80022dc:	4628      	mov	r0, r5
 80022de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022e0:	6a21      	ldr	r1, [r4, #32]
 80022e2:	47b0      	blx	r6
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	89a3      	ldrh	r3, [r4, #12]
 80022e8:	d106      	bne.n	80022f8 <__sflush_r+0x60>
 80022ea:	6829      	ldr	r1, [r5, #0]
 80022ec:	291d      	cmp	r1, #29
 80022ee:	d82b      	bhi.n	8002348 <__sflush_r+0xb0>
 80022f0:	4a28      	ldr	r2, [pc, #160]	@ (8002394 <__sflush_r+0xfc>)
 80022f2:	410a      	asrs	r2, r1
 80022f4:	07d6      	lsls	r6, r2, #31
 80022f6:	d427      	bmi.n	8002348 <__sflush_r+0xb0>
 80022f8:	2200      	movs	r2, #0
 80022fa:	6062      	str	r2, [r4, #4]
 80022fc:	6922      	ldr	r2, [r4, #16]
 80022fe:	04d9      	lsls	r1, r3, #19
 8002300:	6022      	str	r2, [r4, #0]
 8002302:	d504      	bpl.n	800230e <__sflush_r+0x76>
 8002304:	1c42      	adds	r2, r0, #1
 8002306:	d101      	bne.n	800230c <__sflush_r+0x74>
 8002308:	682b      	ldr	r3, [r5, #0]
 800230a:	b903      	cbnz	r3, 800230e <__sflush_r+0x76>
 800230c:	6560      	str	r0, [r4, #84]	@ 0x54
 800230e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002310:	602f      	str	r7, [r5, #0]
 8002312:	b1b9      	cbz	r1, 8002344 <__sflush_r+0xac>
 8002314:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002318:	4299      	cmp	r1, r3
 800231a:	d002      	beq.n	8002322 <__sflush_r+0x8a>
 800231c:	4628      	mov	r0, r5
 800231e:	f000 fa3f 	bl	80027a0 <_free_r>
 8002322:	2300      	movs	r3, #0
 8002324:	6363      	str	r3, [r4, #52]	@ 0x34
 8002326:	e00d      	b.n	8002344 <__sflush_r+0xac>
 8002328:	2301      	movs	r3, #1
 800232a:	4628      	mov	r0, r5
 800232c:	47b0      	blx	r6
 800232e:	4602      	mov	r2, r0
 8002330:	1c50      	adds	r0, r2, #1
 8002332:	d1c9      	bne.n	80022c8 <__sflush_r+0x30>
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0c6      	beq.n	80022c8 <__sflush_r+0x30>
 800233a:	2b1d      	cmp	r3, #29
 800233c:	d001      	beq.n	8002342 <__sflush_r+0xaa>
 800233e:	2b16      	cmp	r3, #22
 8002340:	d11d      	bne.n	800237e <__sflush_r+0xe6>
 8002342:	602f      	str	r7, [r5, #0]
 8002344:	2000      	movs	r0, #0
 8002346:	e021      	b.n	800238c <__sflush_r+0xf4>
 8002348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800234c:	b21b      	sxth	r3, r3
 800234e:	e01a      	b.n	8002386 <__sflush_r+0xee>
 8002350:	690f      	ldr	r7, [r1, #16]
 8002352:	2f00      	cmp	r7, #0
 8002354:	d0f6      	beq.n	8002344 <__sflush_r+0xac>
 8002356:	0793      	lsls	r3, r2, #30
 8002358:	bf18      	it	ne
 800235a:	2300      	movne	r3, #0
 800235c:	680e      	ldr	r6, [r1, #0]
 800235e:	bf08      	it	eq
 8002360:	694b      	ldreq	r3, [r1, #20]
 8002362:	1bf6      	subs	r6, r6, r7
 8002364:	600f      	str	r7, [r1, #0]
 8002366:	608b      	str	r3, [r1, #8]
 8002368:	2e00      	cmp	r6, #0
 800236a:	ddeb      	ble.n	8002344 <__sflush_r+0xac>
 800236c:	4633      	mov	r3, r6
 800236e:	463a      	mov	r2, r7
 8002370:	4628      	mov	r0, r5
 8002372:	6a21      	ldr	r1, [r4, #32]
 8002374:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002378:	47e0      	blx	ip
 800237a:	2800      	cmp	r0, #0
 800237c:	dc07      	bgt.n	800238e <__sflush_r+0xf6>
 800237e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002386:	f04f 30ff 	mov.w	r0, #4294967295
 800238a:	81a3      	strh	r3, [r4, #12]
 800238c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800238e:	4407      	add	r7, r0
 8002390:	1a36      	subs	r6, r6, r0
 8002392:	e7e9      	b.n	8002368 <__sflush_r+0xd0>
 8002394:	dfbffffe 	.word	0xdfbffffe

08002398 <_fflush_r>:
 8002398:	b538      	push	{r3, r4, r5, lr}
 800239a:	690b      	ldr	r3, [r1, #16]
 800239c:	4605      	mov	r5, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	b913      	cbnz	r3, 80023a8 <_fflush_r+0x10>
 80023a2:	2500      	movs	r5, #0
 80023a4:	4628      	mov	r0, r5
 80023a6:	bd38      	pop	{r3, r4, r5, pc}
 80023a8:	b118      	cbz	r0, 80023b2 <_fflush_r+0x1a>
 80023aa:	6a03      	ldr	r3, [r0, #32]
 80023ac:	b90b      	cbnz	r3, 80023b2 <_fflush_r+0x1a>
 80023ae:	f000 f8bb 	bl	8002528 <__sinit>
 80023b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f3      	beq.n	80023a2 <_fflush_r+0xa>
 80023ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80023bc:	07d0      	lsls	r0, r2, #31
 80023be:	d404      	bmi.n	80023ca <_fflush_r+0x32>
 80023c0:	0599      	lsls	r1, r3, #22
 80023c2:	d402      	bmi.n	80023ca <_fflush_r+0x32>
 80023c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023c6:	f000 f9e8 	bl	800279a <__retarget_lock_acquire_recursive>
 80023ca:	4628      	mov	r0, r5
 80023cc:	4621      	mov	r1, r4
 80023ce:	f7ff ff63 	bl	8002298 <__sflush_r>
 80023d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023d4:	4605      	mov	r5, r0
 80023d6:	07da      	lsls	r2, r3, #31
 80023d8:	d4e4      	bmi.n	80023a4 <_fflush_r+0xc>
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	059b      	lsls	r3, r3, #22
 80023de:	d4e1      	bmi.n	80023a4 <_fflush_r+0xc>
 80023e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023e2:	f000 f9db 	bl	800279c <__retarget_lock_release_recursive>
 80023e6:	e7dd      	b.n	80023a4 <_fflush_r+0xc>

080023e8 <fflush>:
 80023e8:	4601      	mov	r1, r0
 80023ea:	b920      	cbnz	r0, 80023f6 <fflush+0xe>
 80023ec:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <fflush+0x18>)
 80023ee:	4905      	ldr	r1, [pc, #20]	@ (8002404 <fflush+0x1c>)
 80023f0:	4805      	ldr	r0, [pc, #20]	@ (8002408 <fflush+0x20>)
 80023f2:	f000 b8b1 	b.w	8002558 <_fwalk_sglue>
 80023f6:	4b05      	ldr	r3, [pc, #20]	@ (800240c <fflush+0x24>)
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	f7ff bfcd 	b.w	8002398 <_fflush_r>
 80023fe:	bf00      	nop
 8002400:	20000058 	.word	0x20000058
 8002404:	08002399 	.word	0x08002399
 8002408:	20000068 	.word	0x20000068
 800240c:	20000064 	.word	0x20000064

08002410 <std>:
 8002410:	2300      	movs	r3, #0
 8002412:	b510      	push	{r4, lr}
 8002414:	4604      	mov	r4, r0
 8002416:	e9c0 3300 	strd	r3, r3, [r0]
 800241a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800241e:	6083      	str	r3, [r0, #8]
 8002420:	8181      	strh	r1, [r0, #12]
 8002422:	6643      	str	r3, [r0, #100]	@ 0x64
 8002424:	81c2      	strh	r2, [r0, #14]
 8002426:	6183      	str	r3, [r0, #24]
 8002428:	4619      	mov	r1, r3
 800242a:	2208      	movs	r2, #8
 800242c:	305c      	adds	r0, #92	@ 0x5c
 800242e:	f000 f93a 	bl	80026a6 <memset>
 8002432:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <std+0x58>)
 8002434:	6224      	str	r4, [r4, #32]
 8002436:	6263      	str	r3, [r4, #36]	@ 0x24
 8002438:	4b0c      	ldr	r3, [pc, #48]	@ (800246c <std+0x5c>)
 800243a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <std+0x60>)
 800243e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <std+0x64>)
 8002442:	6323      	str	r3, [r4, #48]	@ 0x30
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <std+0x68>)
 8002446:	429c      	cmp	r4, r3
 8002448:	d006      	beq.n	8002458 <std+0x48>
 800244a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800244e:	4294      	cmp	r4, r2
 8002450:	d002      	beq.n	8002458 <std+0x48>
 8002452:	33d0      	adds	r3, #208	@ 0xd0
 8002454:	429c      	cmp	r4, r3
 8002456:	d105      	bne.n	8002464 <std+0x54>
 8002458:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800245c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002460:	f000 b99a 	b.w	8002798 <__retarget_lock_init_recursive>
 8002464:	bd10      	pop	{r4, pc}
 8002466:	bf00      	nop
 8002468:	08002621 	.word	0x08002621
 800246c:	08002643 	.word	0x08002643
 8002470:	0800267b 	.word	0x0800267b
 8002474:	0800269f 	.word	0x0800269f
 8002478:	20000228 	.word	0x20000228

0800247c <stdio_exit_handler>:
 800247c:	4a02      	ldr	r2, [pc, #8]	@ (8002488 <stdio_exit_handler+0xc>)
 800247e:	4903      	ldr	r1, [pc, #12]	@ (800248c <stdio_exit_handler+0x10>)
 8002480:	4803      	ldr	r0, [pc, #12]	@ (8002490 <stdio_exit_handler+0x14>)
 8002482:	f000 b869 	b.w	8002558 <_fwalk_sglue>
 8002486:	bf00      	nop
 8002488:	20000058 	.word	0x20000058
 800248c:	08002399 	.word	0x08002399
 8002490:	20000068 	.word	0x20000068

08002494 <cleanup_stdio>:
 8002494:	6841      	ldr	r1, [r0, #4]
 8002496:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <cleanup_stdio+0x34>)
 8002498:	b510      	push	{r4, lr}
 800249a:	4299      	cmp	r1, r3
 800249c:	4604      	mov	r4, r0
 800249e:	d001      	beq.n	80024a4 <cleanup_stdio+0x10>
 80024a0:	f7ff ff7a 	bl	8002398 <_fflush_r>
 80024a4:	68a1      	ldr	r1, [r4, #8]
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <cleanup_stdio+0x38>)
 80024a8:	4299      	cmp	r1, r3
 80024aa:	d002      	beq.n	80024b2 <cleanup_stdio+0x1e>
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7ff ff73 	bl	8002398 <_fflush_r>
 80024b2:	68e1      	ldr	r1, [r4, #12]
 80024b4:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <cleanup_stdio+0x3c>)
 80024b6:	4299      	cmp	r1, r3
 80024b8:	d004      	beq.n	80024c4 <cleanup_stdio+0x30>
 80024ba:	4620      	mov	r0, r4
 80024bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024c0:	f7ff bf6a 	b.w	8002398 <_fflush_r>
 80024c4:	bd10      	pop	{r4, pc}
 80024c6:	bf00      	nop
 80024c8:	20000228 	.word	0x20000228
 80024cc:	20000290 	.word	0x20000290
 80024d0:	200002f8 	.word	0x200002f8

080024d4 <global_stdio_init.part.0>:
 80024d4:	b510      	push	{r4, lr}
 80024d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <global_stdio_init.part.0+0x30>)
 80024d8:	4c0b      	ldr	r4, [pc, #44]	@ (8002508 <global_stdio_init.part.0+0x34>)
 80024da:	4a0c      	ldr	r2, [pc, #48]	@ (800250c <global_stdio_init.part.0+0x38>)
 80024dc:	4620      	mov	r0, r4
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	2104      	movs	r1, #4
 80024e2:	2200      	movs	r2, #0
 80024e4:	f7ff ff94 	bl	8002410 <std>
 80024e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80024ec:	2201      	movs	r2, #1
 80024ee:	2109      	movs	r1, #9
 80024f0:	f7ff ff8e 	bl	8002410 <std>
 80024f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80024f8:	2202      	movs	r2, #2
 80024fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024fe:	2112      	movs	r1, #18
 8002500:	f7ff bf86 	b.w	8002410 <std>
 8002504:	20000360 	.word	0x20000360
 8002508:	20000228 	.word	0x20000228
 800250c:	0800247d 	.word	0x0800247d

08002510 <__sfp_lock_acquire>:
 8002510:	4801      	ldr	r0, [pc, #4]	@ (8002518 <__sfp_lock_acquire+0x8>)
 8002512:	f000 b942 	b.w	800279a <__retarget_lock_acquire_recursive>
 8002516:	bf00      	nop
 8002518:	20000369 	.word	0x20000369

0800251c <__sfp_lock_release>:
 800251c:	4801      	ldr	r0, [pc, #4]	@ (8002524 <__sfp_lock_release+0x8>)
 800251e:	f000 b93d 	b.w	800279c <__retarget_lock_release_recursive>
 8002522:	bf00      	nop
 8002524:	20000369 	.word	0x20000369

08002528 <__sinit>:
 8002528:	b510      	push	{r4, lr}
 800252a:	4604      	mov	r4, r0
 800252c:	f7ff fff0 	bl	8002510 <__sfp_lock_acquire>
 8002530:	6a23      	ldr	r3, [r4, #32]
 8002532:	b11b      	cbz	r3, 800253c <__sinit+0x14>
 8002534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002538:	f7ff bff0 	b.w	800251c <__sfp_lock_release>
 800253c:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <__sinit+0x28>)
 800253e:	6223      	str	r3, [r4, #32]
 8002540:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <__sinit+0x2c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f5      	bne.n	8002534 <__sinit+0xc>
 8002548:	f7ff ffc4 	bl	80024d4 <global_stdio_init.part.0>
 800254c:	e7f2      	b.n	8002534 <__sinit+0xc>
 800254e:	bf00      	nop
 8002550:	08002495 	.word	0x08002495
 8002554:	20000360 	.word	0x20000360

08002558 <_fwalk_sglue>:
 8002558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800255c:	4607      	mov	r7, r0
 800255e:	4688      	mov	r8, r1
 8002560:	4614      	mov	r4, r2
 8002562:	2600      	movs	r6, #0
 8002564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002568:	f1b9 0901 	subs.w	r9, r9, #1
 800256c:	d505      	bpl.n	800257a <_fwalk_sglue+0x22>
 800256e:	6824      	ldr	r4, [r4, #0]
 8002570:	2c00      	cmp	r4, #0
 8002572:	d1f7      	bne.n	8002564 <_fwalk_sglue+0xc>
 8002574:	4630      	mov	r0, r6
 8002576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800257a:	89ab      	ldrh	r3, [r5, #12]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d907      	bls.n	8002590 <_fwalk_sglue+0x38>
 8002580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002584:	3301      	adds	r3, #1
 8002586:	d003      	beq.n	8002590 <_fwalk_sglue+0x38>
 8002588:	4629      	mov	r1, r5
 800258a:	4638      	mov	r0, r7
 800258c:	47c0      	blx	r8
 800258e:	4306      	orrs	r6, r0
 8002590:	3568      	adds	r5, #104	@ 0x68
 8002592:	e7e9      	b.n	8002568 <_fwalk_sglue+0x10>

08002594 <iprintf>:
 8002594:	b40f      	push	{r0, r1, r2, r3}
 8002596:	b507      	push	{r0, r1, r2, lr}
 8002598:	4906      	ldr	r1, [pc, #24]	@ (80025b4 <iprintf+0x20>)
 800259a:	ab04      	add	r3, sp, #16
 800259c:	6808      	ldr	r0, [r1, #0]
 800259e:	f853 2b04 	ldr.w	r2, [r3], #4
 80025a2:	6881      	ldr	r1, [r0, #8]
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	f000 fb71 	bl	8002c8c <_vfiprintf_r>
 80025aa:	b003      	add	sp, #12
 80025ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80025b0:	b004      	add	sp, #16
 80025b2:	4770      	bx	lr
 80025b4:	20000064 	.word	0x20000064

080025b8 <sniprintf>:
 80025b8:	b40c      	push	{r2, r3}
 80025ba:	b530      	push	{r4, r5, lr}
 80025bc:	4b17      	ldr	r3, [pc, #92]	@ (800261c <sniprintf+0x64>)
 80025be:	1e0c      	subs	r4, r1, #0
 80025c0:	681d      	ldr	r5, [r3, #0]
 80025c2:	b09d      	sub	sp, #116	@ 0x74
 80025c4:	da08      	bge.n	80025d8 <sniprintf+0x20>
 80025c6:	238b      	movs	r3, #139	@ 0x8b
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	602b      	str	r3, [r5, #0]
 80025ce:	b01d      	add	sp, #116	@ 0x74
 80025d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80025d4:	b002      	add	sp, #8
 80025d6:	4770      	bx	lr
 80025d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80025dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80025e0:	bf0c      	ite	eq
 80025e2:	4623      	moveq	r3, r4
 80025e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80025e8:	9304      	str	r3, [sp, #16]
 80025ea:	9307      	str	r3, [sp, #28]
 80025ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025f0:	9002      	str	r0, [sp, #8]
 80025f2:	9006      	str	r0, [sp, #24]
 80025f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80025f8:	4628      	mov	r0, r5
 80025fa:	ab21      	add	r3, sp, #132	@ 0x84
 80025fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80025fe:	a902      	add	r1, sp, #8
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	f000 fa1f 	bl	8002a44 <_svfiprintf_r>
 8002606:	1c43      	adds	r3, r0, #1
 8002608:	bfbc      	itt	lt
 800260a:	238b      	movlt	r3, #139	@ 0x8b
 800260c:	602b      	strlt	r3, [r5, #0]
 800260e:	2c00      	cmp	r4, #0
 8002610:	d0dd      	beq.n	80025ce <sniprintf+0x16>
 8002612:	2200      	movs	r2, #0
 8002614:	9b02      	ldr	r3, [sp, #8]
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e7d9      	b.n	80025ce <sniprintf+0x16>
 800261a:	bf00      	nop
 800261c:	20000064 	.word	0x20000064

08002620 <__sread>:
 8002620:	b510      	push	{r4, lr}
 8002622:	460c      	mov	r4, r1
 8002624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002628:	f000 f868 	bl	80026fc <_read_r>
 800262c:	2800      	cmp	r0, #0
 800262e:	bfab      	itete	ge
 8002630:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002632:	89a3      	ldrhlt	r3, [r4, #12]
 8002634:	181b      	addge	r3, r3, r0
 8002636:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800263a:	bfac      	ite	ge
 800263c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800263e:	81a3      	strhlt	r3, [r4, #12]
 8002640:	bd10      	pop	{r4, pc}

08002642 <__swrite>:
 8002642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002646:	461f      	mov	r7, r3
 8002648:	898b      	ldrh	r3, [r1, #12]
 800264a:	4605      	mov	r5, r0
 800264c:	05db      	lsls	r3, r3, #23
 800264e:	460c      	mov	r4, r1
 8002650:	4616      	mov	r6, r2
 8002652:	d505      	bpl.n	8002660 <__swrite+0x1e>
 8002654:	2302      	movs	r3, #2
 8002656:	2200      	movs	r2, #0
 8002658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800265c:	f000 f83c 	bl	80026d8 <_lseek_r>
 8002660:	89a3      	ldrh	r3, [r4, #12]
 8002662:	4632      	mov	r2, r6
 8002664:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002668:	81a3      	strh	r3, [r4, #12]
 800266a:	4628      	mov	r0, r5
 800266c:	463b      	mov	r3, r7
 800266e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002676:	f000 b853 	b.w	8002720 <_write_r>

0800267a <__sseek>:
 800267a:	b510      	push	{r4, lr}
 800267c:	460c      	mov	r4, r1
 800267e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002682:	f000 f829 	bl	80026d8 <_lseek_r>
 8002686:	1c43      	adds	r3, r0, #1
 8002688:	89a3      	ldrh	r3, [r4, #12]
 800268a:	bf15      	itete	ne
 800268c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800268e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002696:	81a3      	strheq	r3, [r4, #12]
 8002698:	bf18      	it	ne
 800269a:	81a3      	strhne	r3, [r4, #12]
 800269c:	bd10      	pop	{r4, pc}

0800269e <__sclose>:
 800269e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026a2:	f000 b809 	b.w	80026b8 <_close_r>

080026a6 <memset>:
 80026a6:	4603      	mov	r3, r0
 80026a8:	4402      	add	r2, r0
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d100      	bne.n	80026b0 <memset+0xa>
 80026ae:	4770      	bx	lr
 80026b0:	f803 1b01 	strb.w	r1, [r3], #1
 80026b4:	e7f9      	b.n	80026aa <memset+0x4>
	...

080026b8 <_close_r>:
 80026b8:	b538      	push	{r3, r4, r5, lr}
 80026ba:	2300      	movs	r3, #0
 80026bc:	4d05      	ldr	r5, [pc, #20]	@ (80026d4 <_close_r+0x1c>)
 80026be:	4604      	mov	r4, r0
 80026c0:	4608      	mov	r0, r1
 80026c2:	602b      	str	r3, [r5, #0]
 80026c4:	f7ff fc24 	bl	8001f10 <_close>
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	d102      	bne.n	80026d2 <_close_r+0x1a>
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	b103      	cbz	r3, 80026d2 <_close_r+0x1a>
 80026d0:	6023      	str	r3, [r4, #0]
 80026d2:	bd38      	pop	{r3, r4, r5, pc}
 80026d4:	20000364 	.word	0x20000364

080026d8 <_lseek_r>:
 80026d8:	b538      	push	{r3, r4, r5, lr}
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	2200      	movs	r2, #0
 80026e2:	4d05      	ldr	r5, [pc, #20]	@ (80026f8 <_lseek_r+0x20>)
 80026e4:	602a      	str	r2, [r5, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7ff fbd3 	bl	8001e92 <_lseek>
 80026ec:	1c43      	adds	r3, r0, #1
 80026ee:	d102      	bne.n	80026f6 <_lseek_r+0x1e>
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	b103      	cbz	r3, 80026f6 <_lseek_r+0x1e>
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
 80026f8:	20000364 	.word	0x20000364

080026fc <_read_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4604      	mov	r4, r0
 8002700:	4608      	mov	r0, r1
 8002702:	4611      	mov	r1, r2
 8002704:	2200      	movs	r2, #0
 8002706:	4d05      	ldr	r5, [pc, #20]	@ (800271c <_read_r+0x20>)
 8002708:	602a      	str	r2, [r5, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	f7ff fb6b 	bl	8001de6 <_read>
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	d102      	bne.n	800271a <_read_r+0x1e>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	b103      	cbz	r3, 800271a <_read_r+0x1e>
 8002718:	6023      	str	r3, [r4, #0]
 800271a:	bd38      	pop	{r3, r4, r5, pc}
 800271c:	20000364 	.word	0x20000364

08002720 <_write_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4604      	mov	r4, r0
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	2200      	movs	r2, #0
 800272a:	4d05      	ldr	r5, [pc, #20]	@ (8002740 <_write_r+0x20>)
 800272c:	602a      	str	r2, [r5, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	f7ff fbc1 	bl	8001eb6 <_write>
 8002734:	1c43      	adds	r3, r0, #1
 8002736:	d102      	bne.n	800273e <_write_r+0x1e>
 8002738:	682b      	ldr	r3, [r5, #0]
 800273a:	b103      	cbz	r3, 800273e <_write_r+0x1e>
 800273c:	6023      	str	r3, [r4, #0]
 800273e:	bd38      	pop	{r3, r4, r5, pc}
 8002740:	20000364 	.word	0x20000364

08002744 <__errno>:
 8002744:	4b01      	ldr	r3, [pc, #4]	@ (800274c <__errno+0x8>)
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000064 	.word	0x20000064

08002750 <__libc_init_array>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	2600      	movs	r6, #0
 8002754:	4d0c      	ldr	r5, [pc, #48]	@ (8002788 <__libc_init_array+0x38>)
 8002756:	4c0d      	ldr	r4, [pc, #52]	@ (800278c <__libc_init_array+0x3c>)
 8002758:	1b64      	subs	r4, r4, r5
 800275a:	10a4      	asrs	r4, r4, #2
 800275c:	42a6      	cmp	r6, r4
 800275e:	d109      	bne.n	8002774 <__libc_init_array+0x24>
 8002760:	f000 fed2 	bl	8003508 <_init>
 8002764:	2600      	movs	r6, #0
 8002766:	4d0a      	ldr	r5, [pc, #40]	@ (8002790 <__libc_init_array+0x40>)
 8002768:	4c0a      	ldr	r4, [pc, #40]	@ (8002794 <__libc_init_array+0x44>)
 800276a:	1b64      	subs	r4, r4, r5
 800276c:	10a4      	asrs	r4, r4, #2
 800276e:	42a6      	cmp	r6, r4
 8002770:	d105      	bne.n	800277e <__libc_init_array+0x2e>
 8002772:	bd70      	pop	{r4, r5, r6, pc}
 8002774:	f855 3b04 	ldr.w	r3, [r5], #4
 8002778:	4798      	blx	r3
 800277a:	3601      	adds	r6, #1
 800277c:	e7ee      	b.n	800275c <__libc_init_array+0xc>
 800277e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002782:	4798      	blx	r3
 8002784:	3601      	adds	r6, #1
 8002786:	e7f2      	b.n	800276e <__libc_init_array+0x1e>
 8002788:	08003800 	.word	0x08003800
 800278c:	08003800 	.word	0x08003800
 8002790:	08003800 	.word	0x08003800
 8002794:	08003804 	.word	0x08003804

08002798 <__retarget_lock_init_recursive>:
 8002798:	4770      	bx	lr

0800279a <__retarget_lock_acquire_recursive>:
 800279a:	4770      	bx	lr

0800279c <__retarget_lock_release_recursive>:
 800279c:	4770      	bx	lr
	...

080027a0 <_free_r>:
 80027a0:	b538      	push	{r3, r4, r5, lr}
 80027a2:	4605      	mov	r5, r0
 80027a4:	2900      	cmp	r1, #0
 80027a6:	d040      	beq.n	800282a <_free_r+0x8a>
 80027a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027ac:	1f0c      	subs	r4, r1, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bfb8      	it	lt
 80027b2:	18e4      	addlt	r4, r4, r3
 80027b4:	f000 f8de 	bl	8002974 <__malloc_lock>
 80027b8:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <_free_r+0x8c>)
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	b933      	cbnz	r3, 80027cc <_free_r+0x2c>
 80027be:	6063      	str	r3, [r4, #4]
 80027c0:	6014      	str	r4, [r2, #0]
 80027c2:	4628      	mov	r0, r5
 80027c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027c8:	f000 b8da 	b.w	8002980 <__malloc_unlock>
 80027cc:	42a3      	cmp	r3, r4
 80027ce:	d908      	bls.n	80027e2 <_free_r+0x42>
 80027d0:	6820      	ldr	r0, [r4, #0]
 80027d2:	1821      	adds	r1, r4, r0
 80027d4:	428b      	cmp	r3, r1
 80027d6:	bf01      	itttt	eq
 80027d8:	6819      	ldreq	r1, [r3, #0]
 80027da:	685b      	ldreq	r3, [r3, #4]
 80027dc:	1809      	addeq	r1, r1, r0
 80027de:	6021      	streq	r1, [r4, #0]
 80027e0:	e7ed      	b.n	80027be <_free_r+0x1e>
 80027e2:	461a      	mov	r2, r3
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	b10b      	cbz	r3, 80027ec <_free_r+0x4c>
 80027e8:	42a3      	cmp	r3, r4
 80027ea:	d9fa      	bls.n	80027e2 <_free_r+0x42>
 80027ec:	6811      	ldr	r1, [r2, #0]
 80027ee:	1850      	adds	r0, r2, r1
 80027f0:	42a0      	cmp	r0, r4
 80027f2:	d10b      	bne.n	800280c <_free_r+0x6c>
 80027f4:	6820      	ldr	r0, [r4, #0]
 80027f6:	4401      	add	r1, r0
 80027f8:	1850      	adds	r0, r2, r1
 80027fa:	4283      	cmp	r3, r0
 80027fc:	6011      	str	r1, [r2, #0]
 80027fe:	d1e0      	bne.n	80027c2 <_free_r+0x22>
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4408      	add	r0, r1
 8002806:	6010      	str	r0, [r2, #0]
 8002808:	6053      	str	r3, [r2, #4]
 800280a:	e7da      	b.n	80027c2 <_free_r+0x22>
 800280c:	d902      	bls.n	8002814 <_free_r+0x74>
 800280e:	230c      	movs	r3, #12
 8002810:	602b      	str	r3, [r5, #0]
 8002812:	e7d6      	b.n	80027c2 <_free_r+0x22>
 8002814:	6820      	ldr	r0, [r4, #0]
 8002816:	1821      	adds	r1, r4, r0
 8002818:	428b      	cmp	r3, r1
 800281a:	bf01      	itttt	eq
 800281c:	6819      	ldreq	r1, [r3, #0]
 800281e:	685b      	ldreq	r3, [r3, #4]
 8002820:	1809      	addeq	r1, r1, r0
 8002822:	6021      	streq	r1, [r4, #0]
 8002824:	6063      	str	r3, [r4, #4]
 8002826:	6054      	str	r4, [r2, #4]
 8002828:	e7cb      	b.n	80027c2 <_free_r+0x22>
 800282a:	bd38      	pop	{r3, r4, r5, pc}
 800282c:	20000370 	.word	0x20000370

08002830 <sbrk_aligned>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	4e0f      	ldr	r6, [pc, #60]	@ (8002870 <sbrk_aligned+0x40>)
 8002834:	460c      	mov	r4, r1
 8002836:	6831      	ldr	r1, [r6, #0]
 8002838:	4605      	mov	r5, r0
 800283a:	b911      	cbnz	r1, 8002842 <sbrk_aligned+0x12>
 800283c:	f000 fd7e 	bl	800333c <_sbrk_r>
 8002840:	6030      	str	r0, [r6, #0]
 8002842:	4621      	mov	r1, r4
 8002844:	4628      	mov	r0, r5
 8002846:	f000 fd79 	bl	800333c <_sbrk_r>
 800284a:	1c43      	adds	r3, r0, #1
 800284c:	d103      	bne.n	8002856 <sbrk_aligned+0x26>
 800284e:	f04f 34ff 	mov.w	r4, #4294967295
 8002852:	4620      	mov	r0, r4
 8002854:	bd70      	pop	{r4, r5, r6, pc}
 8002856:	1cc4      	adds	r4, r0, #3
 8002858:	f024 0403 	bic.w	r4, r4, #3
 800285c:	42a0      	cmp	r0, r4
 800285e:	d0f8      	beq.n	8002852 <sbrk_aligned+0x22>
 8002860:	1a21      	subs	r1, r4, r0
 8002862:	4628      	mov	r0, r5
 8002864:	f000 fd6a 	bl	800333c <_sbrk_r>
 8002868:	3001      	adds	r0, #1
 800286a:	d1f2      	bne.n	8002852 <sbrk_aligned+0x22>
 800286c:	e7ef      	b.n	800284e <sbrk_aligned+0x1e>
 800286e:	bf00      	nop
 8002870:	2000036c 	.word	0x2000036c

08002874 <_malloc_r>:
 8002874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002878:	1ccd      	adds	r5, r1, #3
 800287a:	f025 0503 	bic.w	r5, r5, #3
 800287e:	3508      	adds	r5, #8
 8002880:	2d0c      	cmp	r5, #12
 8002882:	bf38      	it	cc
 8002884:	250c      	movcc	r5, #12
 8002886:	2d00      	cmp	r5, #0
 8002888:	4606      	mov	r6, r0
 800288a:	db01      	blt.n	8002890 <_malloc_r+0x1c>
 800288c:	42a9      	cmp	r1, r5
 800288e:	d904      	bls.n	800289a <_malloc_r+0x26>
 8002890:	230c      	movs	r3, #12
 8002892:	6033      	str	r3, [r6, #0]
 8002894:	2000      	movs	r0, #0
 8002896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800289a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002970 <_malloc_r+0xfc>
 800289e:	f000 f869 	bl	8002974 <__malloc_lock>
 80028a2:	f8d8 3000 	ldr.w	r3, [r8]
 80028a6:	461c      	mov	r4, r3
 80028a8:	bb44      	cbnz	r4, 80028fc <_malloc_r+0x88>
 80028aa:	4629      	mov	r1, r5
 80028ac:	4630      	mov	r0, r6
 80028ae:	f7ff ffbf 	bl	8002830 <sbrk_aligned>
 80028b2:	1c43      	adds	r3, r0, #1
 80028b4:	4604      	mov	r4, r0
 80028b6:	d158      	bne.n	800296a <_malloc_r+0xf6>
 80028b8:	f8d8 4000 	ldr.w	r4, [r8]
 80028bc:	4627      	mov	r7, r4
 80028be:	2f00      	cmp	r7, #0
 80028c0:	d143      	bne.n	800294a <_malloc_r+0xd6>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d04b      	beq.n	800295e <_malloc_r+0xea>
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	4639      	mov	r1, r7
 80028ca:	4630      	mov	r0, r6
 80028cc:	eb04 0903 	add.w	r9, r4, r3
 80028d0:	f000 fd34 	bl	800333c <_sbrk_r>
 80028d4:	4581      	cmp	r9, r0
 80028d6:	d142      	bne.n	800295e <_malloc_r+0xea>
 80028d8:	6821      	ldr	r1, [r4, #0]
 80028da:	4630      	mov	r0, r6
 80028dc:	1a6d      	subs	r5, r5, r1
 80028de:	4629      	mov	r1, r5
 80028e0:	f7ff ffa6 	bl	8002830 <sbrk_aligned>
 80028e4:	3001      	adds	r0, #1
 80028e6:	d03a      	beq.n	800295e <_malloc_r+0xea>
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	442b      	add	r3, r5
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	f8d8 3000 	ldr.w	r3, [r8]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	bb62      	cbnz	r2, 8002950 <_malloc_r+0xdc>
 80028f6:	f8c8 7000 	str.w	r7, [r8]
 80028fa:	e00f      	b.n	800291c <_malloc_r+0xa8>
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	1b52      	subs	r2, r2, r5
 8002900:	d420      	bmi.n	8002944 <_malloc_r+0xd0>
 8002902:	2a0b      	cmp	r2, #11
 8002904:	d917      	bls.n	8002936 <_malloc_r+0xc2>
 8002906:	1961      	adds	r1, r4, r5
 8002908:	42a3      	cmp	r3, r4
 800290a:	6025      	str	r5, [r4, #0]
 800290c:	bf18      	it	ne
 800290e:	6059      	strne	r1, [r3, #4]
 8002910:	6863      	ldr	r3, [r4, #4]
 8002912:	bf08      	it	eq
 8002914:	f8c8 1000 	streq.w	r1, [r8]
 8002918:	5162      	str	r2, [r4, r5]
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	4630      	mov	r0, r6
 800291e:	f000 f82f 	bl	8002980 <__malloc_unlock>
 8002922:	f104 000b 	add.w	r0, r4, #11
 8002926:	1d23      	adds	r3, r4, #4
 8002928:	f020 0007 	bic.w	r0, r0, #7
 800292c:	1ac2      	subs	r2, r0, r3
 800292e:	bf1c      	itt	ne
 8002930:	1a1b      	subne	r3, r3, r0
 8002932:	50a3      	strne	r3, [r4, r2]
 8002934:	e7af      	b.n	8002896 <_malloc_r+0x22>
 8002936:	6862      	ldr	r2, [r4, #4]
 8002938:	42a3      	cmp	r3, r4
 800293a:	bf0c      	ite	eq
 800293c:	f8c8 2000 	streq.w	r2, [r8]
 8002940:	605a      	strne	r2, [r3, #4]
 8002942:	e7eb      	b.n	800291c <_malloc_r+0xa8>
 8002944:	4623      	mov	r3, r4
 8002946:	6864      	ldr	r4, [r4, #4]
 8002948:	e7ae      	b.n	80028a8 <_malloc_r+0x34>
 800294a:	463c      	mov	r4, r7
 800294c:	687f      	ldr	r7, [r7, #4]
 800294e:	e7b6      	b.n	80028be <_malloc_r+0x4a>
 8002950:	461a      	mov	r2, r3
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	42a3      	cmp	r3, r4
 8002956:	d1fb      	bne.n	8002950 <_malloc_r+0xdc>
 8002958:	2300      	movs	r3, #0
 800295a:	6053      	str	r3, [r2, #4]
 800295c:	e7de      	b.n	800291c <_malloc_r+0xa8>
 800295e:	230c      	movs	r3, #12
 8002960:	4630      	mov	r0, r6
 8002962:	6033      	str	r3, [r6, #0]
 8002964:	f000 f80c 	bl	8002980 <__malloc_unlock>
 8002968:	e794      	b.n	8002894 <_malloc_r+0x20>
 800296a:	6005      	str	r5, [r0, #0]
 800296c:	e7d6      	b.n	800291c <_malloc_r+0xa8>
 800296e:	bf00      	nop
 8002970:	20000370 	.word	0x20000370

08002974 <__malloc_lock>:
 8002974:	4801      	ldr	r0, [pc, #4]	@ (800297c <__malloc_lock+0x8>)
 8002976:	f7ff bf10 	b.w	800279a <__retarget_lock_acquire_recursive>
 800297a:	bf00      	nop
 800297c:	20000368 	.word	0x20000368

08002980 <__malloc_unlock>:
 8002980:	4801      	ldr	r0, [pc, #4]	@ (8002988 <__malloc_unlock+0x8>)
 8002982:	f7ff bf0b 	b.w	800279c <__retarget_lock_release_recursive>
 8002986:	bf00      	nop
 8002988:	20000368 	.word	0x20000368

0800298c <__ssputs_r>:
 800298c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002990:	461f      	mov	r7, r3
 8002992:	688e      	ldr	r6, [r1, #8]
 8002994:	4682      	mov	sl, r0
 8002996:	42be      	cmp	r6, r7
 8002998:	460c      	mov	r4, r1
 800299a:	4690      	mov	r8, r2
 800299c:	680b      	ldr	r3, [r1, #0]
 800299e:	d82d      	bhi.n	80029fc <__ssputs_r+0x70>
 80029a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80029a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80029a8:	d026      	beq.n	80029f8 <__ssputs_r+0x6c>
 80029aa:	6965      	ldr	r5, [r4, #20]
 80029ac:	6909      	ldr	r1, [r1, #16]
 80029ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029b2:	eba3 0901 	sub.w	r9, r3, r1
 80029b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029ba:	1c7b      	adds	r3, r7, #1
 80029bc:	444b      	add	r3, r9
 80029be:	106d      	asrs	r5, r5, #1
 80029c0:	429d      	cmp	r5, r3
 80029c2:	bf38      	it	cc
 80029c4:	461d      	movcc	r5, r3
 80029c6:	0553      	lsls	r3, r2, #21
 80029c8:	d527      	bpl.n	8002a1a <__ssputs_r+0x8e>
 80029ca:	4629      	mov	r1, r5
 80029cc:	f7ff ff52 	bl	8002874 <_malloc_r>
 80029d0:	4606      	mov	r6, r0
 80029d2:	b360      	cbz	r0, 8002a2e <__ssputs_r+0xa2>
 80029d4:	464a      	mov	r2, r9
 80029d6:	6921      	ldr	r1, [r4, #16]
 80029d8:	f000 fcce 	bl	8003378 <memcpy>
 80029dc:	89a3      	ldrh	r3, [r4, #12]
 80029de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80029e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e6:	81a3      	strh	r3, [r4, #12]
 80029e8:	6126      	str	r6, [r4, #16]
 80029ea:	444e      	add	r6, r9
 80029ec:	6026      	str	r6, [r4, #0]
 80029ee:	463e      	mov	r6, r7
 80029f0:	6165      	str	r5, [r4, #20]
 80029f2:	eba5 0509 	sub.w	r5, r5, r9
 80029f6:	60a5      	str	r5, [r4, #8]
 80029f8:	42be      	cmp	r6, r7
 80029fa:	d900      	bls.n	80029fe <__ssputs_r+0x72>
 80029fc:	463e      	mov	r6, r7
 80029fe:	4632      	mov	r2, r6
 8002a00:	4641      	mov	r1, r8
 8002a02:	6820      	ldr	r0, [r4, #0]
 8002a04:	f000 fc80 	bl	8003308 <memmove>
 8002a08:	2000      	movs	r0, #0
 8002a0a:	68a3      	ldr	r3, [r4, #8]
 8002a0c:	1b9b      	subs	r3, r3, r6
 8002a0e:	60a3      	str	r3, [r4, #8]
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	4433      	add	r3, r6
 8002a14:	6023      	str	r3, [r4, #0]
 8002a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a1a:	462a      	mov	r2, r5
 8002a1c:	f000 fcba 	bl	8003394 <_realloc_r>
 8002a20:	4606      	mov	r6, r0
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d1e0      	bne.n	80029e8 <__ssputs_r+0x5c>
 8002a26:	4650      	mov	r0, sl
 8002a28:	6921      	ldr	r1, [r4, #16]
 8002a2a:	f7ff feb9 	bl	80027a0 <_free_r>
 8002a2e:	230c      	movs	r3, #12
 8002a30:	f8ca 3000 	str.w	r3, [sl]
 8002a34:	89a3      	ldrh	r3, [r4, #12]
 8002a36:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a3e:	81a3      	strh	r3, [r4, #12]
 8002a40:	e7e9      	b.n	8002a16 <__ssputs_r+0x8a>
	...

08002a44 <_svfiprintf_r>:
 8002a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a48:	4698      	mov	r8, r3
 8002a4a:	898b      	ldrh	r3, [r1, #12]
 8002a4c:	4607      	mov	r7, r0
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	460d      	mov	r5, r1
 8002a52:	4614      	mov	r4, r2
 8002a54:	b09d      	sub	sp, #116	@ 0x74
 8002a56:	d510      	bpl.n	8002a7a <_svfiprintf_r+0x36>
 8002a58:	690b      	ldr	r3, [r1, #16]
 8002a5a:	b973      	cbnz	r3, 8002a7a <_svfiprintf_r+0x36>
 8002a5c:	2140      	movs	r1, #64	@ 0x40
 8002a5e:	f7ff ff09 	bl	8002874 <_malloc_r>
 8002a62:	6028      	str	r0, [r5, #0]
 8002a64:	6128      	str	r0, [r5, #16]
 8002a66:	b930      	cbnz	r0, 8002a76 <_svfiprintf_r+0x32>
 8002a68:	230c      	movs	r3, #12
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	b01d      	add	sp, #116	@ 0x74
 8002a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a76:	2340      	movs	r3, #64	@ 0x40
 8002a78:	616b      	str	r3, [r5, #20]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a7e:	2320      	movs	r3, #32
 8002a80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a84:	2330      	movs	r3, #48	@ 0x30
 8002a86:	f04f 0901 	mov.w	r9, #1
 8002a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a8e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002c28 <_svfiprintf_r+0x1e4>
 8002a92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a96:	4623      	mov	r3, r4
 8002a98:	469a      	mov	sl, r3
 8002a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a9e:	b10a      	cbz	r2, 8002aa4 <_svfiprintf_r+0x60>
 8002aa0:	2a25      	cmp	r2, #37	@ 0x25
 8002aa2:	d1f9      	bne.n	8002a98 <_svfiprintf_r+0x54>
 8002aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8002aa8:	d00b      	beq.n	8002ac2 <_svfiprintf_r+0x7e>
 8002aaa:	465b      	mov	r3, fp
 8002aac:	4622      	mov	r2, r4
 8002aae:	4629      	mov	r1, r5
 8002ab0:	4638      	mov	r0, r7
 8002ab2:	f7ff ff6b 	bl	800298c <__ssputs_r>
 8002ab6:	3001      	adds	r0, #1
 8002ab8:	f000 80a7 	beq.w	8002c0a <_svfiprintf_r+0x1c6>
 8002abc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002abe:	445a      	add	r2, fp
 8002ac0:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 809f 	beq.w	8002c0a <_svfiprintf_r+0x1c6>
 8002acc:	2300      	movs	r3, #0
 8002ace:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ad6:	f10a 0a01 	add.w	sl, sl, #1
 8002ada:	9304      	str	r3, [sp, #16]
 8002adc:	9307      	str	r3, [sp, #28]
 8002ade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ae2:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ae4:	4654      	mov	r4, sl
 8002ae6:	2205      	movs	r2, #5
 8002ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aec:	484e      	ldr	r0, [pc, #312]	@ (8002c28 <_svfiprintf_r+0x1e4>)
 8002aee:	f000 fc35 	bl	800335c <memchr>
 8002af2:	9a04      	ldr	r2, [sp, #16]
 8002af4:	b9d8      	cbnz	r0, 8002b2e <_svfiprintf_r+0xea>
 8002af6:	06d0      	lsls	r0, r2, #27
 8002af8:	bf44      	itt	mi
 8002afa:	2320      	movmi	r3, #32
 8002afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b00:	0711      	lsls	r1, r2, #28
 8002b02:	bf44      	itt	mi
 8002b04:	232b      	movmi	r3, #43	@ 0x2b
 8002b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b10:	d015      	beq.n	8002b3e <_svfiprintf_r+0xfa>
 8002b12:	4654      	mov	r4, sl
 8002b14:	2000      	movs	r0, #0
 8002b16:	f04f 0c0a 	mov.w	ip, #10
 8002b1a:	9a07      	ldr	r2, [sp, #28]
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b22:	3b30      	subs	r3, #48	@ 0x30
 8002b24:	2b09      	cmp	r3, #9
 8002b26:	d94b      	bls.n	8002bc0 <_svfiprintf_r+0x17c>
 8002b28:	b1b0      	cbz	r0, 8002b58 <_svfiprintf_r+0x114>
 8002b2a:	9207      	str	r2, [sp, #28]
 8002b2c:	e014      	b.n	8002b58 <_svfiprintf_r+0x114>
 8002b2e:	eba0 0308 	sub.w	r3, r0, r8
 8002b32:	fa09 f303 	lsl.w	r3, r9, r3
 8002b36:	4313      	orrs	r3, r2
 8002b38:	46a2      	mov	sl, r4
 8002b3a:	9304      	str	r3, [sp, #16]
 8002b3c:	e7d2      	b.n	8002ae4 <_svfiprintf_r+0xa0>
 8002b3e:	9b03      	ldr	r3, [sp, #12]
 8002b40:	1d19      	adds	r1, r3, #4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	9103      	str	r1, [sp, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bfbb      	ittet	lt
 8002b4a:	425b      	neglt	r3, r3
 8002b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8002b50:	9307      	strge	r3, [sp, #28]
 8002b52:	9307      	strlt	r3, [sp, #28]
 8002b54:	bfb8      	it	lt
 8002b56:	9204      	strlt	r2, [sp, #16]
 8002b58:	7823      	ldrb	r3, [r4, #0]
 8002b5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b5c:	d10a      	bne.n	8002b74 <_svfiprintf_r+0x130>
 8002b5e:	7863      	ldrb	r3, [r4, #1]
 8002b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b62:	d132      	bne.n	8002bca <_svfiprintf_r+0x186>
 8002b64:	9b03      	ldr	r3, [sp, #12]
 8002b66:	3402      	adds	r4, #2
 8002b68:	1d1a      	adds	r2, r3, #4
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	9203      	str	r2, [sp, #12]
 8002b6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b72:	9305      	str	r3, [sp, #20]
 8002b74:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002c2c <_svfiprintf_r+0x1e8>
 8002b78:	2203      	movs	r2, #3
 8002b7a:	4650      	mov	r0, sl
 8002b7c:	7821      	ldrb	r1, [r4, #0]
 8002b7e:	f000 fbed 	bl	800335c <memchr>
 8002b82:	b138      	cbz	r0, 8002b94 <_svfiprintf_r+0x150>
 8002b84:	2240      	movs	r2, #64	@ 0x40
 8002b86:	9b04      	ldr	r3, [sp, #16]
 8002b88:	eba0 000a 	sub.w	r0, r0, sl
 8002b8c:	4082      	lsls	r2, r0
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	3401      	adds	r4, #1
 8002b92:	9304      	str	r3, [sp, #16]
 8002b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b98:	2206      	movs	r2, #6
 8002b9a:	4825      	ldr	r0, [pc, #148]	@ (8002c30 <_svfiprintf_r+0x1ec>)
 8002b9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ba0:	f000 fbdc 	bl	800335c <memchr>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d036      	beq.n	8002c16 <_svfiprintf_r+0x1d2>
 8002ba8:	4b22      	ldr	r3, [pc, #136]	@ (8002c34 <_svfiprintf_r+0x1f0>)
 8002baa:	bb1b      	cbnz	r3, 8002bf4 <_svfiprintf_r+0x1b0>
 8002bac:	9b03      	ldr	r3, [sp, #12]
 8002bae:	3307      	adds	r3, #7
 8002bb0:	f023 0307 	bic.w	r3, r3, #7
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	9303      	str	r3, [sp, #12]
 8002bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002bba:	4433      	add	r3, r6
 8002bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bbe:	e76a      	b.n	8002a96 <_svfiprintf_r+0x52>
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bc8:	e7a8      	b.n	8002b1c <_svfiprintf_r+0xd8>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f04f 0c0a 	mov.w	ip, #10
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	3401      	adds	r4, #1
 8002bd4:	9305      	str	r3, [sp, #20]
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bdc:	3a30      	subs	r2, #48	@ 0x30
 8002bde:	2a09      	cmp	r2, #9
 8002be0:	d903      	bls.n	8002bea <_svfiprintf_r+0x1a6>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0c6      	beq.n	8002b74 <_svfiprintf_r+0x130>
 8002be6:	9105      	str	r1, [sp, #20]
 8002be8:	e7c4      	b.n	8002b74 <_svfiprintf_r+0x130>
 8002bea:	4604      	mov	r4, r0
 8002bec:	2301      	movs	r3, #1
 8002bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bf2:	e7f0      	b.n	8002bd6 <_svfiprintf_r+0x192>
 8002bf4:	ab03      	add	r3, sp, #12
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	462a      	mov	r2, r5
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8002c38 <_svfiprintf_r+0x1f4>)
 8002bfe:	a904      	add	r1, sp, #16
 8002c00:	f3af 8000 	nop.w
 8002c04:	1c42      	adds	r2, r0, #1
 8002c06:	4606      	mov	r6, r0
 8002c08:	d1d6      	bne.n	8002bb8 <_svfiprintf_r+0x174>
 8002c0a:	89ab      	ldrh	r3, [r5, #12]
 8002c0c:	065b      	lsls	r3, r3, #25
 8002c0e:	f53f af2d 	bmi.w	8002a6c <_svfiprintf_r+0x28>
 8002c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002c14:	e72c      	b.n	8002a70 <_svfiprintf_r+0x2c>
 8002c16:	ab03      	add	r3, sp, #12
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	462a      	mov	r2, r5
 8002c1c:	4638      	mov	r0, r7
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <_svfiprintf_r+0x1f4>)
 8002c20:	a904      	add	r1, sp, #16
 8002c22:	f000 f9bd 	bl	8002fa0 <_printf_i>
 8002c26:	e7ed      	b.n	8002c04 <_svfiprintf_r+0x1c0>
 8002c28:	080037c2 	.word	0x080037c2
 8002c2c:	080037c8 	.word	0x080037c8
 8002c30:	080037cc 	.word	0x080037cc
 8002c34:	00000000 	.word	0x00000000
 8002c38:	0800298d 	.word	0x0800298d

08002c3c <__sfputc_r>:
 8002c3c:	6893      	ldr	r3, [r2, #8]
 8002c3e:	b410      	push	{r4}
 8002c40:	3b01      	subs	r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	6093      	str	r3, [r2, #8]
 8002c46:	da07      	bge.n	8002c58 <__sfputc_r+0x1c>
 8002c48:	6994      	ldr	r4, [r2, #24]
 8002c4a:	42a3      	cmp	r3, r4
 8002c4c:	db01      	blt.n	8002c52 <__sfputc_r+0x16>
 8002c4e:	290a      	cmp	r1, #10
 8002c50:	d102      	bne.n	8002c58 <__sfputc_r+0x1c>
 8002c52:	bc10      	pop	{r4}
 8002c54:	f000 bac4 	b.w	80031e0 <__swbuf_r>
 8002c58:	6813      	ldr	r3, [r2, #0]
 8002c5a:	1c58      	adds	r0, r3, #1
 8002c5c:	6010      	str	r0, [r2, #0]
 8002c5e:	7019      	strb	r1, [r3, #0]
 8002c60:	4608      	mov	r0, r1
 8002c62:	bc10      	pop	{r4}
 8002c64:	4770      	bx	lr

08002c66 <__sfputs_r>:
 8002c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c68:	4606      	mov	r6, r0
 8002c6a:	460f      	mov	r7, r1
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	18d5      	adds	r5, r2, r3
 8002c70:	42ac      	cmp	r4, r5
 8002c72:	d101      	bne.n	8002c78 <__sfputs_r+0x12>
 8002c74:	2000      	movs	r0, #0
 8002c76:	e007      	b.n	8002c88 <__sfputs_r+0x22>
 8002c78:	463a      	mov	r2, r7
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c80:	f7ff ffdc 	bl	8002c3c <__sfputc_r>
 8002c84:	1c43      	adds	r3, r0, #1
 8002c86:	d1f3      	bne.n	8002c70 <__sfputs_r+0xa>
 8002c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c8c <_vfiprintf_r>:
 8002c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c90:	460d      	mov	r5, r1
 8002c92:	4614      	mov	r4, r2
 8002c94:	4698      	mov	r8, r3
 8002c96:	4606      	mov	r6, r0
 8002c98:	b09d      	sub	sp, #116	@ 0x74
 8002c9a:	b118      	cbz	r0, 8002ca4 <_vfiprintf_r+0x18>
 8002c9c:	6a03      	ldr	r3, [r0, #32]
 8002c9e:	b90b      	cbnz	r3, 8002ca4 <_vfiprintf_r+0x18>
 8002ca0:	f7ff fc42 	bl	8002528 <__sinit>
 8002ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ca6:	07d9      	lsls	r1, r3, #31
 8002ca8:	d405      	bmi.n	8002cb6 <_vfiprintf_r+0x2a>
 8002caa:	89ab      	ldrh	r3, [r5, #12]
 8002cac:	059a      	lsls	r2, r3, #22
 8002cae:	d402      	bmi.n	8002cb6 <_vfiprintf_r+0x2a>
 8002cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cb2:	f7ff fd72 	bl	800279a <__retarget_lock_acquire_recursive>
 8002cb6:	89ab      	ldrh	r3, [r5, #12]
 8002cb8:	071b      	lsls	r3, r3, #28
 8002cba:	d501      	bpl.n	8002cc0 <_vfiprintf_r+0x34>
 8002cbc:	692b      	ldr	r3, [r5, #16]
 8002cbe:	b99b      	cbnz	r3, 8002ce8 <_vfiprintf_r+0x5c>
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	f000 faca 	bl	800325c <__swsetup_r>
 8002cc8:	b170      	cbz	r0, 8002ce8 <_vfiprintf_r+0x5c>
 8002cca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ccc:	07dc      	lsls	r4, r3, #31
 8002cce:	d504      	bpl.n	8002cda <_vfiprintf_r+0x4e>
 8002cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd4:	b01d      	add	sp, #116	@ 0x74
 8002cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cda:	89ab      	ldrh	r3, [r5, #12]
 8002cdc:	0598      	lsls	r0, r3, #22
 8002cde:	d4f7      	bmi.n	8002cd0 <_vfiprintf_r+0x44>
 8002ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ce2:	f7ff fd5b 	bl	800279c <__retarget_lock_release_recursive>
 8002ce6:	e7f3      	b.n	8002cd0 <_vfiprintf_r+0x44>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cec:	2320      	movs	r3, #32
 8002cee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002cf2:	2330      	movs	r3, #48	@ 0x30
 8002cf4:	f04f 0901 	mov.w	r9, #1
 8002cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cfc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002ea8 <_vfiprintf_r+0x21c>
 8002d00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d04:	4623      	mov	r3, r4
 8002d06:	469a      	mov	sl, r3
 8002d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d0c:	b10a      	cbz	r2, 8002d12 <_vfiprintf_r+0x86>
 8002d0e:	2a25      	cmp	r2, #37	@ 0x25
 8002d10:	d1f9      	bne.n	8002d06 <_vfiprintf_r+0x7a>
 8002d12:	ebba 0b04 	subs.w	fp, sl, r4
 8002d16:	d00b      	beq.n	8002d30 <_vfiprintf_r+0xa4>
 8002d18:	465b      	mov	r3, fp
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	4630      	mov	r0, r6
 8002d20:	f7ff ffa1 	bl	8002c66 <__sfputs_r>
 8002d24:	3001      	adds	r0, #1
 8002d26:	f000 80a7 	beq.w	8002e78 <_vfiprintf_r+0x1ec>
 8002d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d2c:	445a      	add	r2, fp
 8002d2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d30:	f89a 3000 	ldrb.w	r3, [sl]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 809f 	beq.w	8002e78 <_vfiprintf_r+0x1ec>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d44:	f10a 0a01 	add.w	sl, sl, #1
 8002d48:	9304      	str	r3, [sp, #16]
 8002d4a:	9307      	str	r3, [sp, #28]
 8002d4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d50:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d52:	4654      	mov	r4, sl
 8002d54:	2205      	movs	r2, #5
 8002d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d5a:	4853      	ldr	r0, [pc, #332]	@ (8002ea8 <_vfiprintf_r+0x21c>)
 8002d5c:	f000 fafe 	bl	800335c <memchr>
 8002d60:	9a04      	ldr	r2, [sp, #16]
 8002d62:	b9d8      	cbnz	r0, 8002d9c <_vfiprintf_r+0x110>
 8002d64:	06d1      	lsls	r1, r2, #27
 8002d66:	bf44      	itt	mi
 8002d68:	2320      	movmi	r3, #32
 8002d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d6e:	0713      	lsls	r3, r2, #28
 8002d70:	bf44      	itt	mi
 8002d72:	232b      	movmi	r3, #43	@ 0x2b
 8002d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d78:	f89a 3000 	ldrb.w	r3, [sl]
 8002d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d7e:	d015      	beq.n	8002dac <_vfiprintf_r+0x120>
 8002d80:	4654      	mov	r4, sl
 8002d82:	2000      	movs	r0, #0
 8002d84:	f04f 0c0a 	mov.w	ip, #10
 8002d88:	9a07      	ldr	r2, [sp, #28]
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d90:	3b30      	subs	r3, #48	@ 0x30
 8002d92:	2b09      	cmp	r3, #9
 8002d94:	d94b      	bls.n	8002e2e <_vfiprintf_r+0x1a2>
 8002d96:	b1b0      	cbz	r0, 8002dc6 <_vfiprintf_r+0x13a>
 8002d98:	9207      	str	r2, [sp, #28]
 8002d9a:	e014      	b.n	8002dc6 <_vfiprintf_r+0x13a>
 8002d9c:	eba0 0308 	sub.w	r3, r0, r8
 8002da0:	fa09 f303 	lsl.w	r3, r9, r3
 8002da4:	4313      	orrs	r3, r2
 8002da6:	46a2      	mov	sl, r4
 8002da8:	9304      	str	r3, [sp, #16]
 8002daa:	e7d2      	b.n	8002d52 <_vfiprintf_r+0xc6>
 8002dac:	9b03      	ldr	r3, [sp, #12]
 8002dae:	1d19      	adds	r1, r3, #4
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	9103      	str	r1, [sp, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bfbb      	ittet	lt
 8002db8:	425b      	neglt	r3, r3
 8002dba:	f042 0202 	orrlt.w	r2, r2, #2
 8002dbe:	9307      	strge	r3, [sp, #28]
 8002dc0:	9307      	strlt	r3, [sp, #28]
 8002dc2:	bfb8      	it	lt
 8002dc4:	9204      	strlt	r2, [sp, #16]
 8002dc6:	7823      	ldrb	r3, [r4, #0]
 8002dc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002dca:	d10a      	bne.n	8002de2 <_vfiprintf_r+0x156>
 8002dcc:	7863      	ldrb	r3, [r4, #1]
 8002dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dd0:	d132      	bne.n	8002e38 <_vfiprintf_r+0x1ac>
 8002dd2:	9b03      	ldr	r3, [sp, #12]
 8002dd4:	3402      	adds	r4, #2
 8002dd6:	1d1a      	adds	r2, r3, #4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002de0:	9305      	str	r3, [sp, #20]
 8002de2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002eac <_vfiprintf_r+0x220>
 8002de6:	2203      	movs	r2, #3
 8002de8:	4650      	mov	r0, sl
 8002dea:	7821      	ldrb	r1, [r4, #0]
 8002dec:	f000 fab6 	bl	800335c <memchr>
 8002df0:	b138      	cbz	r0, 8002e02 <_vfiprintf_r+0x176>
 8002df2:	2240      	movs	r2, #64	@ 0x40
 8002df4:	9b04      	ldr	r3, [sp, #16]
 8002df6:	eba0 000a 	sub.w	r0, r0, sl
 8002dfa:	4082      	lsls	r2, r0
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	3401      	adds	r4, #1
 8002e00:	9304      	str	r3, [sp, #16]
 8002e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e06:	2206      	movs	r2, #6
 8002e08:	4829      	ldr	r0, [pc, #164]	@ (8002eb0 <_vfiprintf_r+0x224>)
 8002e0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e0e:	f000 faa5 	bl	800335c <memchr>
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d03f      	beq.n	8002e96 <_vfiprintf_r+0x20a>
 8002e16:	4b27      	ldr	r3, [pc, #156]	@ (8002eb4 <_vfiprintf_r+0x228>)
 8002e18:	bb1b      	cbnz	r3, 8002e62 <_vfiprintf_r+0x1d6>
 8002e1a:	9b03      	ldr	r3, [sp, #12]
 8002e1c:	3307      	adds	r3, #7
 8002e1e:	f023 0307 	bic.w	r3, r3, #7
 8002e22:	3308      	adds	r3, #8
 8002e24:	9303      	str	r3, [sp, #12]
 8002e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e28:	443b      	add	r3, r7
 8002e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e2c:	e76a      	b.n	8002d04 <_vfiprintf_r+0x78>
 8002e2e:	460c      	mov	r4, r1
 8002e30:	2001      	movs	r0, #1
 8002e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e36:	e7a8      	b.n	8002d8a <_vfiprintf_r+0xfe>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f04f 0c0a 	mov.w	ip, #10
 8002e3e:	4619      	mov	r1, r3
 8002e40:	3401      	adds	r4, #1
 8002e42:	9305      	str	r3, [sp, #20]
 8002e44:	4620      	mov	r0, r4
 8002e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e4a:	3a30      	subs	r2, #48	@ 0x30
 8002e4c:	2a09      	cmp	r2, #9
 8002e4e:	d903      	bls.n	8002e58 <_vfiprintf_r+0x1cc>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0c6      	beq.n	8002de2 <_vfiprintf_r+0x156>
 8002e54:	9105      	str	r1, [sp, #20]
 8002e56:	e7c4      	b.n	8002de2 <_vfiprintf_r+0x156>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e60:	e7f0      	b.n	8002e44 <_vfiprintf_r+0x1b8>
 8002e62:	ab03      	add	r3, sp, #12
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	462a      	mov	r2, r5
 8002e68:	4630      	mov	r0, r6
 8002e6a:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <_vfiprintf_r+0x22c>)
 8002e6c:	a904      	add	r1, sp, #16
 8002e6e:	f3af 8000 	nop.w
 8002e72:	4607      	mov	r7, r0
 8002e74:	1c78      	adds	r0, r7, #1
 8002e76:	d1d6      	bne.n	8002e26 <_vfiprintf_r+0x19a>
 8002e78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e7a:	07d9      	lsls	r1, r3, #31
 8002e7c:	d405      	bmi.n	8002e8a <_vfiprintf_r+0x1fe>
 8002e7e:	89ab      	ldrh	r3, [r5, #12]
 8002e80:	059a      	lsls	r2, r3, #22
 8002e82:	d402      	bmi.n	8002e8a <_vfiprintf_r+0x1fe>
 8002e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e86:	f7ff fc89 	bl	800279c <__retarget_lock_release_recursive>
 8002e8a:	89ab      	ldrh	r3, [r5, #12]
 8002e8c:	065b      	lsls	r3, r3, #25
 8002e8e:	f53f af1f 	bmi.w	8002cd0 <_vfiprintf_r+0x44>
 8002e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e94:	e71e      	b.n	8002cd4 <_vfiprintf_r+0x48>
 8002e96:	ab03      	add	r3, sp, #12
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	462a      	mov	r2, r5
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <_vfiprintf_r+0x22c>)
 8002ea0:	a904      	add	r1, sp, #16
 8002ea2:	f000 f87d 	bl	8002fa0 <_printf_i>
 8002ea6:	e7e4      	b.n	8002e72 <_vfiprintf_r+0x1e6>
 8002ea8:	080037c2 	.word	0x080037c2
 8002eac:	080037c8 	.word	0x080037c8
 8002eb0:	080037cc 	.word	0x080037cc
 8002eb4:	00000000 	.word	0x00000000
 8002eb8:	08002c67 	.word	0x08002c67

08002ebc <_printf_common>:
 8002ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec0:	4616      	mov	r6, r2
 8002ec2:	4698      	mov	r8, r3
 8002ec4:	688a      	ldr	r2, [r1, #8]
 8002ec6:	690b      	ldr	r3, [r1, #16]
 8002ec8:	4607      	mov	r7, r0
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	bfb8      	it	lt
 8002ece:	4613      	movlt	r3, r2
 8002ed0:	6033      	str	r3, [r6, #0]
 8002ed2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002edc:	b10a      	cbz	r2, 8002ee2 <_printf_common+0x26>
 8002ede:	3301      	adds	r3, #1
 8002ee0:	6033      	str	r3, [r6, #0]
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	0699      	lsls	r1, r3, #26
 8002ee6:	bf42      	ittt	mi
 8002ee8:	6833      	ldrmi	r3, [r6, #0]
 8002eea:	3302      	addmi	r3, #2
 8002eec:	6033      	strmi	r3, [r6, #0]
 8002eee:	6825      	ldr	r5, [r4, #0]
 8002ef0:	f015 0506 	ands.w	r5, r5, #6
 8002ef4:	d106      	bne.n	8002f04 <_printf_common+0x48>
 8002ef6:	f104 0a19 	add.w	sl, r4, #25
 8002efa:	68e3      	ldr	r3, [r4, #12]
 8002efc:	6832      	ldr	r2, [r6, #0]
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	42ab      	cmp	r3, r5
 8002f02:	dc2b      	bgt.n	8002f5c <_printf_common+0xa0>
 8002f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f08:	6822      	ldr	r2, [r4, #0]
 8002f0a:	3b00      	subs	r3, #0
 8002f0c:	bf18      	it	ne
 8002f0e:	2301      	movne	r3, #1
 8002f10:	0692      	lsls	r2, r2, #26
 8002f12:	d430      	bmi.n	8002f76 <_printf_common+0xba>
 8002f14:	4641      	mov	r1, r8
 8002f16:	4638      	mov	r0, r7
 8002f18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f1c:	47c8      	blx	r9
 8002f1e:	3001      	adds	r0, #1
 8002f20:	d023      	beq.n	8002f6a <_printf_common+0xae>
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	6922      	ldr	r2, [r4, #16]
 8002f26:	f003 0306 	and.w	r3, r3, #6
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	bf14      	ite	ne
 8002f2e:	2500      	movne	r5, #0
 8002f30:	6833      	ldreq	r3, [r6, #0]
 8002f32:	f04f 0600 	mov.w	r6, #0
 8002f36:	bf08      	it	eq
 8002f38:	68e5      	ldreq	r5, [r4, #12]
 8002f3a:	f104 041a 	add.w	r4, r4, #26
 8002f3e:	bf08      	it	eq
 8002f40:	1aed      	subeq	r5, r5, r3
 8002f42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f46:	bf08      	it	eq
 8002f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	bfc4      	itt	gt
 8002f50:	1a9b      	subgt	r3, r3, r2
 8002f52:	18ed      	addgt	r5, r5, r3
 8002f54:	42b5      	cmp	r5, r6
 8002f56:	d11a      	bne.n	8002f8e <_printf_common+0xd2>
 8002f58:	2000      	movs	r0, #0
 8002f5a:	e008      	b.n	8002f6e <_printf_common+0xb2>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	4652      	mov	r2, sl
 8002f60:	4641      	mov	r1, r8
 8002f62:	4638      	mov	r0, r7
 8002f64:	47c8      	blx	r9
 8002f66:	3001      	adds	r0, #1
 8002f68:	d103      	bne.n	8002f72 <_printf_common+0xb6>
 8002f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f72:	3501      	adds	r5, #1
 8002f74:	e7c1      	b.n	8002efa <_printf_common+0x3e>
 8002f76:	2030      	movs	r0, #48	@ 0x30
 8002f78:	18e1      	adds	r1, r4, r3
 8002f7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f84:	4422      	add	r2, r4
 8002f86:	3302      	adds	r3, #2
 8002f88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f8c:	e7c2      	b.n	8002f14 <_printf_common+0x58>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	4622      	mov	r2, r4
 8002f92:	4641      	mov	r1, r8
 8002f94:	4638      	mov	r0, r7
 8002f96:	47c8      	blx	r9
 8002f98:	3001      	adds	r0, #1
 8002f9a:	d0e6      	beq.n	8002f6a <_printf_common+0xae>
 8002f9c:	3601      	adds	r6, #1
 8002f9e:	e7d9      	b.n	8002f54 <_printf_common+0x98>

08002fa0 <_printf_i>:
 8002fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa4:	7e0f      	ldrb	r7, [r1, #24]
 8002fa6:	4691      	mov	r9, r2
 8002fa8:	2f78      	cmp	r7, #120	@ 0x78
 8002faa:	4680      	mov	r8, r0
 8002fac:	460c      	mov	r4, r1
 8002fae:	469a      	mov	sl, r3
 8002fb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002fb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002fb6:	d807      	bhi.n	8002fc8 <_printf_i+0x28>
 8002fb8:	2f62      	cmp	r7, #98	@ 0x62
 8002fba:	d80a      	bhi.n	8002fd2 <_printf_i+0x32>
 8002fbc:	2f00      	cmp	r7, #0
 8002fbe:	f000 80d3 	beq.w	8003168 <_printf_i+0x1c8>
 8002fc2:	2f58      	cmp	r7, #88	@ 0x58
 8002fc4:	f000 80ba 	beq.w	800313c <_printf_i+0x19c>
 8002fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002fd0:	e03a      	b.n	8003048 <_printf_i+0xa8>
 8002fd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002fd6:	2b15      	cmp	r3, #21
 8002fd8:	d8f6      	bhi.n	8002fc8 <_printf_i+0x28>
 8002fda:	a101      	add	r1, pc, #4	@ (adr r1, 8002fe0 <_printf_i+0x40>)
 8002fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fe0:	08003039 	.word	0x08003039
 8002fe4:	0800304d 	.word	0x0800304d
 8002fe8:	08002fc9 	.word	0x08002fc9
 8002fec:	08002fc9 	.word	0x08002fc9
 8002ff0:	08002fc9 	.word	0x08002fc9
 8002ff4:	08002fc9 	.word	0x08002fc9
 8002ff8:	0800304d 	.word	0x0800304d
 8002ffc:	08002fc9 	.word	0x08002fc9
 8003000:	08002fc9 	.word	0x08002fc9
 8003004:	08002fc9 	.word	0x08002fc9
 8003008:	08002fc9 	.word	0x08002fc9
 800300c:	0800314f 	.word	0x0800314f
 8003010:	08003077 	.word	0x08003077
 8003014:	08003109 	.word	0x08003109
 8003018:	08002fc9 	.word	0x08002fc9
 800301c:	08002fc9 	.word	0x08002fc9
 8003020:	08003171 	.word	0x08003171
 8003024:	08002fc9 	.word	0x08002fc9
 8003028:	08003077 	.word	0x08003077
 800302c:	08002fc9 	.word	0x08002fc9
 8003030:	08002fc9 	.word	0x08002fc9
 8003034:	08003111 	.word	0x08003111
 8003038:	6833      	ldr	r3, [r6, #0]
 800303a:	1d1a      	adds	r2, r3, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6032      	str	r2, [r6, #0]
 8003040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003044:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003048:	2301      	movs	r3, #1
 800304a:	e09e      	b.n	800318a <_printf_i+0x1ea>
 800304c:	6833      	ldr	r3, [r6, #0]
 800304e:	6820      	ldr	r0, [r4, #0]
 8003050:	1d19      	adds	r1, r3, #4
 8003052:	6031      	str	r1, [r6, #0]
 8003054:	0606      	lsls	r6, r0, #24
 8003056:	d501      	bpl.n	800305c <_printf_i+0xbc>
 8003058:	681d      	ldr	r5, [r3, #0]
 800305a:	e003      	b.n	8003064 <_printf_i+0xc4>
 800305c:	0645      	lsls	r5, r0, #25
 800305e:	d5fb      	bpl.n	8003058 <_printf_i+0xb8>
 8003060:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003064:	2d00      	cmp	r5, #0
 8003066:	da03      	bge.n	8003070 <_printf_i+0xd0>
 8003068:	232d      	movs	r3, #45	@ 0x2d
 800306a:	426d      	negs	r5, r5
 800306c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003070:	230a      	movs	r3, #10
 8003072:	4859      	ldr	r0, [pc, #356]	@ (80031d8 <_printf_i+0x238>)
 8003074:	e011      	b.n	800309a <_printf_i+0xfa>
 8003076:	6821      	ldr	r1, [r4, #0]
 8003078:	6833      	ldr	r3, [r6, #0]
 800307a:	0608      	lsls	r0, r1, #24
 800307c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003080:	d402      	bmi.n	8003088 <_printf_i+0xe8>
 8003082:	0649      	lsls	r1, r1, #25
 8003084:	bf48      	it	mi
 8003086:	b2ad      	uxthmi	r5, r5
 8003088:	2f6f      	cmp	r7, #111	@ 0x6f
 800308a:	6033      	str	r3, [r6, #0]
 800308c:	bf14      	ite	ne
 800308e:	230a      	movne	r3, #10
 8003090:	2308      	moveq	r3, #8
 8003092:	4851      	ldr	r0, [pc, #324]	@ (80031d8 <_printf_i+0x238>)
 8003094:	2100      	movs	r1, #0
 8003096:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800309a:	6866      	ldr	r6, [r4, #4]
 800309c:	2e00      	cmp	r6, #0
 800309e:	bfa8      	it	ge
 80030a0:	6821      	ldrge	r1, [r4, #0]
 80030a2:	60a6      	str	r6, [r4, #8]
 80030a4:	bfa4      	itt	ge
 80030a6:	f021 0104 	bicge.w	r1, r1, #4
 80030aa:	6021      	strge	r1, [r4, #0]
 80030ac:	b90d      	cbnz	r5, 80030b2 <_printf_i+0x112>
 80030ae:	2e00      	cmp	r6, #0
 80030b0:	d04b      	beq.n	800314a <_printf_i+0x1aa>
 80030b2:	4616      	mov	r6, r2
 80030b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80030b8:	fb03 5711 	mls	r7, r3, r1, r5
 80030bc:	5dc7      	ldrb	r7, [r0, r7]
 80030be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030c2:	462f      	mov	r7, r5
 80030c4:	42bb      	cmp	r3, r7
 80030c6:	460d      	mov	r5, r1
 80030c8:	d9f4      	bls.n	80030b4 <_printf_i+0x114>
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d10b      	bne.n	80030e6 <_printf_i+0x146>
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	07df      	lsls	r7, r3, #31
 80030d2:	d508      	bpl.n	80030e6 <_printf_i+0x146>
 80030d4:	6923      	ldr	r3, [r4, #16]
 80030d6:	6861      	ldr	r1, [r4, #4]
 80030d8:	4299      	cmp	r1, r3
 80030da:	bfde      	ittt	le
 80030dc:	2330      	movle	r3, #48	@ 0x30
 80030de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030e6:	1b92      	subs	r2, r2, r6
 80030e8:	6122      	str	r2, [r4, #16]
 80030ea:	464b      	mov	r3, r9
 80030ec:	4621      	mov	r1, r4
 80030ee:	4640      	mov	r0, r8
 80030f0:	f8cd a000 	str.w	sl, [sp]
 80030f4:	aa03      	add	r2, sp, #12
 80030f6:	f7ff fee1 	bl	8002ebc <_printf_common>
 80030fa:	3001      	adds	r0, #1
 80030fc:	d14a      	bne.n	8003194 <_printf_i+0x1f4>
 80030fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003102:	b004      	add	sp, #16
 8003104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	f043 0320 	orr.w	r3, r3, #32
 800310e:	6023      	str	r3, [r4, #0]
 8003110:	2778      	movs	r7, #120	@ 0x78
 8003112:	4832      	ldr	r0, [pc, #200]	@ (80031dc <_printf_i+0x23c>)
 8003114:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	6831      	ldr	r1, [r6, #0]
 800311c:	061f      	lsls	r7, r3, #24
 800311e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003122:	d402      	bmi.n	800312a <_printf_i+0x18a>
 8003124:	065f      	lsls	r7, r3, #25
 8003126:	bf48      	it	mi
 8003128:	b2ad      	uxthmi	r5, r5
 800312a:	6031      	str	r1, [r6, #0]
 800312c:	07d9      	lsls	r1, r3, #31
 800312e:	bf44      	itt	mi
 8003130:	f043 0320 	orrmi.w	r3, r3, #32
 8003134:	6023      	strmi	r3, [r4, #0]
 8003136:	b11d      	cbz	r5, 8003140 <_printf_i+0x1a0>
 8003138:	2310      	movs	r3, #16
 800313a:	e7ab      	b.n	8003094 <_printf_i+0xf4>
 800313c:	4826      	ldr	r0, [pc, #152]	@ (80031d8 <_printf_i+0x238>)
 800313e:	e7e9      	b.n	8003114 <_printf_i+0x174>
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	f023 0320 	bic.w	r3, r3, #32
 8003146:	6023      	str	r3, [r4, #0]
 8003148:	e7f6      	b.n	8003138 <_printf_i+0x198>
 800314a:	4616      	mov	r6, r2
 800314c:	e7bd      	b.n	80030ca <_printf_i+0x12a>
 800314e:	6833      	ldr	r3, [r6, #0]
 8003150:	6825      	ldr	r5, [r4, #0]
 8003152:	1d18      	adds	r0, r3, #4
 8003154:	6961      	ldr	r1, [r4, #20]
 8003156:	6030      	str	r0, [r6, #0]
 8003158:	062e      	lsls	r6, r5, #24
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	d501      	bpl.n	8003162 <_printf_i+0x1c2>
 800315e:	6019      	str	r1, [r3, #0]
 8003160:	e002      	b.n	8003168 <_printf_i+0x1c8>
 8003162:	0668      	lsls	r0, r5, #25
 8003164:	d5fb      	bpl.n	800315e <_printf_i+0x1be>
 8003166:	8019      	strh	r1, [r3, #0]
 8003168:	2300      	movs	r3, #0
 800316a:	4616      	mov	r6, r2
 800316c:	6123      	str	r3, [r4, #16]
 800316e:	e7bc      	b.n	80030ea <_printf_i+0x14a>
 8003170:	6833      	ldr	r3, [r6, #0]
 8003172:	2100      	movs	r1, #0
 8003174:	1d1a      	adds	r2, r3, #4
 8003176:	6032      	str	r2, [r6, #0]
 8003178:	681e      	ldr	r6, [r3, #0]
 800317a:	6862      	ldr	r2, [r4, #4]
 800317c:	4630      	mov	r0, r6
 800317e:	f000 f8ed 	bl	800335c <memchr>
 8003182:	b108      	cbz	r0, 8003188 <_printf_i+0x1e8>
 8003184:	1b80      	subs	r0, r0, r6
 8003186:	6060      	str	r0, [r4, #4]
 8003188:	6863      	ldr	r3, [r4, #4]
 800318a:	6123      	str	r3, [r4, #16]
 800318c:	2300      	movs	r3, #0
 800318e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003192:	e7aa      	b.n	80030ea <_printf_i+0x14a>
 8003194:	4632      	mov	r2, r6
 8003196:	4649      	mov	r1, r9
 8003198:	4640      	mov	r0, r8
 800319a:	6923      	ldr	r3, [r4, #16]
 800319c:	47d0      	blx	sl
 800319e:	3001      	adds	r0, #1
 80031a0:	d0ad      	beq.n	80030fe <_printf_i+0x15e>
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	079b      	lsls	r3, r3, #30
 80031a6:	d413      	bmi.n	80031d0 <_printf_i+0x230>
 80031a8:	68e0      	ldr	r0, [r4, #12]
 80031aa:	9b03      	ldr	r3, [sp, #12]
 80031ac:	4298      	cmp	r0, r3
 80031ae:	bfb8      	it	lt
 80031b0:	4618      	movlt	r0, r3
 80031b2:	e7a6      	b.n	8003102 <_printf_i+0x162>
 80031b4:	2301      	movs	r3, #1
 80031b6:	4632      	mov	r2, r6
 80031b8:	4649      	mov	r1, r9
 80031ba:	4640      	mov	r0, r8
 80031bc:	47d0      	blx	sl
 80031be:	3001      	adds	r0, #1
 80031c0:	d09d      	beq.n	80030fe <_printf_i+0x15e>
 80031c2:	3501      	adds	r5, #1
 80031c4:	68e3      	ldr	r3, [r4, #12]
 80031c6:	9903      	ldr	r1, [sp, #12]
 80031c8:	1a5b      	subs	r3, r3, r1
 80031ca:	42ab      	cmp	r3, r5
 80031cc:	dcf2      	bgt.n	80031b4 <_printf_i+0x214>
 80031ce:	e7eb      	b.n	80031a8 <_printf_i+0x208>
 80031d0:	2500      	movs	r5, #0
 80031d2:	f104 0619 	add.w	r6, r4, #25
 80031d6:	e7f5      	b.n	80031c4 <_printf_i+0x224>
 80031d8:	080037d3 	.word	0x080037d3
 80031dc:	080037e4 	.word	0x080037e4

080031e0 <__swbuf_r>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	460e      	mov	r6, r1
 80031e4:	4614      	mov	r4, r2
 80031e6:	4605      	mov	r5, r0
 80031e8:	b118      	cbz	r0, 80031f2 <__swbuf_r+0x12>
 80031ea:	6a03      	ldr	r3, [r0, #32]
 80031ec:	b90b      	cbnz	r3, 80031f2 <__swbuf_r+0x12>
 80031ee:	f7ff f99b 	bl	8002528 <__sinit>
 80031f2:	69a3      	ldr	r3, [r4, #24]
 80031f4:	60a3      	str	r3, [r4, #8]
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	071a      	lsls	r2, r3, #28
 80031fa:	d501      	bpl.n	8003200 <__swbuf_r+0x20>
 80031fc:	6923      	ldr	r3, [r4, #16]
 80031fe:	b943      	cbnz	r3, 8003212 <__swbuf_r+0x32>
 8003200:	4621      	mov	r1, r4
 8003202:	4628      	mov	r0, r5
 8003204:	f000 f82a 	bl	800325c <__swsetup_r>
 8003208:	b118      	cbz	r0, 8003212 <__swbuf_r+0x32>
 800320a:	f04f 37ff 	mov.w	r7, #4294967295
 800320e:	4638      	mov	r0, r7
 8003210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	6922      	ldr	r2, [r4, #16]
 8003216:	b2f6      	uxtb	r6, r6
 8003218:	1a98      	subs	r0, r3, r2
 800321a:	6963      	ldr	r3, [r4, #20]
 800321c:	4637      	mov	r7, r6
 800321e:	4283      	cmp	r3, r0
 8003220:	dc05      	bgt.n	800322e <__swbuf_r+0x4e>
 8003222:	4621      	mov	r1, r4
 8003224:	4628      	mov	r0, r5
 8003226:	f7ff f8b7 	bl	8002398 <_fflush_r>
 800322a:	2800      	cmp	r0, #0
 800322c:	d1ed      	bne.n	800320a <__swbuf_r+0x2a>
 800322e:	68a3      	ldr	r3, [r4, #8]
 8003230:	3b01      	subs	r3, #1
 8003232:	60a3      	str	r3, [r4, #8]
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	6022      	str	r2, [r4, #0]
 800323a:	701e      	strb	r6, [r3, #0]
 800323c:	6962      	ldr	r2, [r4, #20]
 800323e:	1c43      	adds	r3, r0, #1
 8003240:	429a      	cmp	r2, r3
 8003242:	d004      	beq.n	800324e <__swbuf_r+0x6e>
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	07db      	lsls	r3, r3, #31
 8003248:	d5e1      	bpl.n	800320e <__swbuf_r+0x2e>
 800324a:	2e0a      	cmp	r6, #10
 800324c:	d1df      	bne.n	800320e <__swbuf_r+0x2e>
 800324e:	4621      	mov	r1, r4
 8003250:	4628      	mov	r0, r5
 8003252:	f7ff f8a1 	bl	8002398 <_fflush_r>
 8003256:	2800      	cmp	r0, #0
 8003258:	d0d9      	beq.n	800320e <__swbuf_r+0x2e>
 800325a:	e7d6      	b.n	800320a <__swbuf_r+0x2a>

0800325c <__swsetup_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	4b29      	ldr	r3, [pc, #164]	@ (8003304 <__swsetup_r+0xa8>)
 8003260:	4605      	mov	r5, r0
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	460c      	mov	r4, r1
 8003266:	b118      	cbz	r0, 8003270 <__swsetup_r+0x14>
 8003268:	6a03      	ldr	r3, [r0, #32]
 800326a:	b90b      	cbnz	r3, 8003270 <__swsetup_r+0x14>
 800326c:	f7ff f95c 	bl	8002528 <__sinit>
 8003270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003274:	0719      	lsls	r1, r3, #28
 8003276:	d422      	bmi.n	80032be <__swsetup_r+0x62>
 8003278:	06da      	lsls	r2, r3, #27
 800327a:	d407      	bmi.n	800328c <__swsetup_r+0x30>
 800327c:	2209      	movs	r2, #9
 800327e:	602a      	str	r2, [r5, #0]
 8003280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	81a3      	strh	r3, [r4, #12]
 800328a:	e033      	b.n	80032f4 <__swsetup_r+0x98>
 800328c:	0758      	lsls	r0, r3, #29
 800328e:	d512      	bpl.n	80032b6 <__swsetup_r+0x5a>
 8003290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003292:	b141      	cbz	r1, 80032a6 <__swsetup_r+0x4a>
 8003294:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003298:	4299      	cmp	r1, r3
 800329a:	d002      	beq.n	80032a2 <__swsetup_r+0x46>
 800329c:	4628      	mov	r0, r5
 800329e:	f7ff fa7f 	bl	80027a0 <_free_r>
 80032a2:	2300      	movs	r3, #0
 80032a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80032a6:	89a3      	ldrh	r3, [r4, #12]
 80032a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	2300      	movs	r3, #0
 80032b0:	6063      	str	r3, [r4, #4]
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	6923      	ldr	r3, [r4, #16]
 80032c0:	b94b      	cbnz	r3, 80032d6 <__swsetup_r+0x7a>
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032cc:	d003      	beq.n	80032d6 <__swsetup_r+0x7a>
 80032ce:	4621      	mov	r1, r4
 80032d0:	4628      	mov	r0, r5
 80032d2:	f000 f8b2 	bl	800343a <__smakebuf_r>
 80032d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032da:	f013 0201 	ands.w	r2, r3, #1
 80032de:	d00a      	beq.n	80032f6 <__swsetup_r+0x9a>
 80032e0:	2200      	movs	r2, #0
 80032e2:	60a2      	str	r2, [r4, #8]
 80032e4:	6962      	ldr	r2, [r4, #20]
 80032e6:	4252      	negs	r2, r2
 80032e8:	61a2      	str	r2, [r4, #24]
 80032ea:	6922      	ldr	r2, [r4, #16]
 80032ec:	b942      	cbnz	r2, 8003300 <__swsetup_r+0xa4>
 80032ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80032f2:	d1c5      	bne.n	8003280 <__swsetup_r+0x24>
 80032f4:	bd38      	pop	{r3, r4, r5, pc}
 80032f6:	0799      	lsls	r1, r3, #30
 80032f8:	bf58      	it	pl
 80032fa:	6962      	ldrpl	r2, [r4, #20]
 80032fc:	60a2      	str	r2, [r4, #8]
 80032fe:	e7f4      	b.n	80032ea <__swsetup_r+0x8e>
 8003300:	2000      	movs	r0, #0
 8003302:	e7f7      	b.n	80032f4 <__swsetup_r+0x98>
 8003304:	20000064 	.word	0x20000064

08003308 <memmove>:
 8003308:	4288      	cmp	r0, r1
 800330a:	b510      	push	{r4, lr}
 800330c:	eb01 0402 	add.w	r4, r1, r2
 8003310:	d902      	bls.n	8003318 <memmove+0x10>
 8003312:	4284      	cmp	r4, r0
 8003314:	4623      	mov	r3, r4
 8003316:	d807      	bhi.n	8003328 <memmove+0x20>
 8003318:	1e43      	subs	r3, r0, #1
 800331a:	42a1      	cmp	r1, r4
 800331c:	d008      	beq.n	8003330 <memmove+0x28>
 800331e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003326:	e7f8      	b.n	800331a <memmove+0x12>
 8003328:	4601      	mov	r1, r0
 800332a:	4402      	add	r2, r0
 800332c:	428a      	cmp	r2, r1
 800332e:	d100      	bne.n	8003332 <memmove+0x2a>
 8003330:	bd10      	pop	{r4, pc}
 8003332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800333a:	e7f7      	b.n	800332c <memmove+0x24>

0800333c <_sbrk_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	2300      	movs	r3, #0
 8003340:	4d05      	ldr	r5, [pc, #20]	@ (8003358 <_sbrk_r+0x1c>)
 8003342:	4604      	mov	r4, r0
 8003344:	4608      	mov	r0, r1
 8003346:	602b      	str	r3, [r5, #0]
 8003348:	f7fd f8d0 	bl	80004ec <_sbrk>
 800334c:	1c43      	adds	r3, r0, #1
 800334e:	d102      	bne.n	8003356 <_sbrk_r+0x1a>
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	b103      	cbz	r3, 8003356 <_sbrk_r+0x1a>
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	bd38      	pop	{r3, r4, r5, pc}
 8003358:	20000364 	.word	0x20000364

0800335c <memchr>:
 800335c:	4603      	mov	r3, r0
 800335e:	b510      	push	{r4, lr}
 8003360:	b2c9      	uxtb	r1, r1
 8003362:	4402      	add	r2, r0
 8003364:	4293      	cmp	r3, r2
 8003366:	4618      	mov	r0, r3
 8003368:	d101      	bne.n	800336e <memchr+0x12>
 800336a:	2000      	movs	r0, #0
 800336c:	e003      	b.n	8003376 <memchr+0x1a>
 800336e:	7804      	ldrb	r4, [r0, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	428c      	cmp	r4, r1
 8003374:	d1f6      	bne.n	8003364 <memchr+0x8>
 8003376:	bd10      	pop	{r4, pc}

08003378 <memcpy>:
 8003378:	440a      	add	r2, r1
 800337a:	4291      	cmp	r1, r2
 800337c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003380:	d100      	bne.n	8003384 <memcpy+0xc>
 8003382:	4770      	bx	lr
 8003384:	b510      	push	{r4, lr}
 8003386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800338a:	4291      	cmp	r1, r2
 800338c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003390:	d1f9      	bne.n	8003386 <memcpy+0xe>
 8003392:	bd10      	pop	{r4, pc}

08003394 <_realloc_r>:
 8003394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003398:	4680      	mov	r8, r0
 800339a:	4615      	mov	r5, r2
 800339c:	460c      	mov	r4, r1
 800339e:	b921      	cbnz	r1, 80033aa <_realloc_r+0x16>
 80033a0:	4611      	mov	r1, r2
 80033a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033a6:	f7ff ba65 	b.w	8002874 <_malloc_r>
 80033aa:	b92a      	cbnz	r2, 80033b8 <_realloc_r+0x24>
 80033ac:	f7ff f9f8 	bl	80027a0 <_free_r>
 80033b0:	2400      	movs	r4, #0
 80033b2:	4620      	mov	r0, r4
 80033b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b8:	f000 f89e 	bl	80034f8 <_malloc_usable_size_r>
 80033bc:	4285      	cmp	r5, r0
 80033be:	4606      	mov	r6, r0
 80033c0:	d802      	bhi.n	80033c8 <_realloc_r+0x34>
 80033c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80033c6:	d8f4      	bhi.n	80033b2 <_realloc_r+0x1e>
 80033c8:	4629      	mov	r1, r5
 80033ca:	4640      	mov	r0, r8
 80033cc:	f7ff fa52 	bl	8002874 <_malloc_r>
 80033d0:	4607      	mov	r7, r0
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d0ec      	beq.n	80033b0 <_realloc_r+0x1c>
 80033d6:	42b5      	cmp	r5, r6
 80033d8:	462a      	mov	r2, r5
 80033da:	4621      	mov	r1, r4
 80033dc:	bf28      	it	cs
 80033de:	4632      	movcs	r2, r6
 80033e0:	f7ff ffca 	bl	8003378 <memcpy>
 80033e4:	4621      	mov	r1, r4
 80033e6:	4640      	mov	r0, r8
 80033e8:	f7ff f9da 	bl	80027a0 <_free_r>
 80033ec:	463c      	mov	r4, r7
 80033ee:	e7e0      	b.n	80033b2 <_realloc_r+0x1e>

080033f0 <__swhatbuf_r>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	460c      	mov	r4, r1
 80033f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f8:	4615      	mov	r5, r2
 80033fa:	2900      	cmp	r1, #0
 80033fc:	461e      	mov	r6, r3
 80033fe:	b096      	sub	sp, #88	@ 0x58
 8003400:	da0c      	bge.n	800341c <__swhatbuf_r+0x2c>
 8003402:	89a3      	ldrh	r3, [r4, #12]
 8003404:	2100      	movs	r1, #0
 8003406:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800340a:	bf14      	ite	ne
 800340c:	2340      	movne	r3, #64	@ 0x40
 800340e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003412:	2000      	movs	r0, #0
 8003414:	6031      	str	r1, [r6, #0]
 8003416:	602b      	str	r3, [r5, #0]
 8003418:	b016      	add	sp, #88	@ 0x58
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	466a      	mov	r2, sp
 800341e:	f000 f849 	bl	80034b4 <_fstat_r>
 8003422:	2800      	cmp	r0, #0
 8003424:	dbed      	blt.n	8003402 <__swhatbuf_r+0x12>
 8003426:	9901      	ldr	r1, [sp, #4]
 8003428:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800342c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003430:	4259      	negs	r1, r3
 8003432:	4159      	adcs	r1, r3
 8003434:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003438:	e7eb      	b.n	8003412 <__swhatbuf_r+0x22>

0800343a <__smakebuf_r>:
 800343a:	898b      	ldrh	r3, [r1, #12]
 800343c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800343e:	079d      	lsls	r5, r3, #30
 8003440:	4606      	mov	r6, r0
 8003442:	460c      	mov	r4, r1
 8003444:	d507      	bpl.n	8003456 <__smakebuf_r+0x1c>
 8003446:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	6123      	str	r3, [r4, #16]
 800344e:	2301      	movs	r3, #1
 8003450:	6163      	str	r3, [r4, #20]
 8003452:	b003      	add	sp, #12
 8003454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003456:	466a      	mov	r2, sp
 8003458:	ab01      	add	r3, sp, #4
 800345a:	f7ff ffc9 	bl	80033f0 <__swhatbuf_r>
 800345e:	9f00      	ldr	r7, [sp, #0]
 8003460:	4605      	mov	r5, r0
 8003462:	4639      	mov	r1, r7
 8003464:	4630      	mov	r0, r6
 8003466:	f7ff fa05 	bl	8002874 <_malloc_r>
 800346a:	b948      	cbnz	r0, 8003480 <__smakebuf_r+0x46>
 800346c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003470:	059a      	lsls	r2, r3, #22
 8003472:	d4ee      	bmi.n	8003452 <__smakebuf_r+0x18>
 8003474:	f023 0303 	bic.w	r3, r3, #3
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	e7e2      	b.n	8003446 <__smakebuf_r+0xc>
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800348a:	81a3      	strh	r3, [r4, #12]
 800348c:	9b01      	ldr	r3, [sp, #4]
 800348e:	6020      	str	r0, [r4, #0]
 8003490:	b15b      	cbz	r3, 80034aa <__smakebuf_r+0x70>
 8003492:	4630      	mov	r0, r6
 8003494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003498:	f000 f81e 	bl	80034d8 <_isatty_r>
 800349c:	b128      	cbz	r0, 80034aa <__smakebuf_r+0x70>
 800349e:	89a3      	ldrh	r3, [r4, #12]
 80034a0:	f023 0303 	bic.w	r3, r3, #3
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	81a3      	strh	r3, [r4, #12]
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	431d      	orrs	r5, r3
 80034ae:	81a5      	strh	r5, [r4, #12]
 80034b0:	e7cf      	b.n	8003452 <__smakebuf_r+0x18>
	...

080034b4 <_fstat_r>:
 80034b4:	b538      	push	{r3, r4, r5, lr}
 80034b6:	2300      	movs	r3, #0
 80034b8:	4d06      	ldr	r5, [pc, #24]	@ (80034d4 <_fstat_r+0x20>)
 80034ba:	4604      	mov	r4, r0
 80034bc:	4608      	mov	r0, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	602b      	str	r3, [r5, #0]
 80034c2:	f7fe fd68 	bl	8001f96 <_fstat>
 80034c6:	1c43      	adds	r3, r0, #1
 80034c8:	d102      	bne.n	80034d0 <_fstat_r+0x1c>
 80034ca:	682b      	ldr	r3, [r5, #0]
 80034cc:	b103      	cbz	r3, 80034d0 <_fstat_r+0x1c>
 80034ce:	6023      	str	r3, [r4, #0]
 80034d0:	bd38      	pop	{r3, r4, r5, pc}
 80034d2:	bf00      	nop
 80034d4:	20000364 	.word	0x20000364

080034d8 <_isatty_r>:
 80034d8:	b538      	push	{r3, r4, r5, lr}
 80034da:	2300      	movs	r3, #0
 80034dc:	4d05      	ldr	r5, [pc, #20]	@ (80034f4 <_isatty_r+0x1c>)
 80034de:	4604      	mov	r4, r0
 80034e0:	4608      	mov	r0, r1
 80034e2:	602b      	str	r3, [r5, #0]
 80034e4:	f7fe feba 	bl	800225c <_isatty>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d102      	bne.n	80034f2 <_isatty_r+0x1a>
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	b103      	cbz	r3, 80034f2 <_isatty_r+0x1a>
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
 80034f4:	20000364 	.word	0x20000364

080034f8 <_malloc_usable_size_r>:
 80034f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034fc:	1f18      	subs	r0, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bfbc      	itt	lt
 8003502:	580b      	ldrlt	r3, [r1, r0]
 8003504:	18c0      	addlt	r0, r0, r3
 8003506:	4770      	bx	lr

08003508 <_init>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	bf00      	nop
 800350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350e:	bc08      	pop	{r3}
 8003510:	469e      	mov	lr, r3
 8003512:	4770      	bx	lr

08003514 <_fini>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	bf00      	nop
 8003518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800351a:	bc08      	pop	{r3}
 800351c:	469e      	mov	lr, r3
 800351e:	4770      	bx	lr
